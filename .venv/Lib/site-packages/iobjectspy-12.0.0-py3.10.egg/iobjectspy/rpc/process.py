from iobjectspy.enums import PixelFormat

__all__ = ['Tile', 'ProcessInfo']


class Tile:
    def __init__(self, values, no_data_value=None, bands=1, pixel=None):
        self.values = values
        self.no_data_value = no_data_value
        self.bands = bands
        self.pixel = PixelFormat._make(pixel)

    def rows(self):
        if self.values:
            if self.values.ndim == 2:
                return self.values.shape[0]
            elif self.values.ndim == 3:
                return self.values.shape[1]
            else:
                raise ValueError('Unsupported array, only support 2 or 3 dim array')
        else:
            return None

    def cols(self):
        if self.values:
            if self.values.ndim == 2:
                return self.values.shape[1]
            elif self.values.ndim == 3:
                return self.values.shape[2]
            else:
                raise ValueError('Unsupported array, only support 2 or 3 dim array')
        else:
            return None


class ProcessInfo:

    def __init__(self, py_code, entry_class, kvargs):
        self.py_code = py_code
        self.entry_class = entry_class
        self.kvargs = dict()
        if kvargs is not None and isinstance(kvargs, dict):
            for name, value in kvargs.items():
                self.kvargs[name] = value
