import datetime
import os
import time
import threading
from ._gateway import get_jvm, get_gateway
from ._logger import *
import struct
import sys
from .enums import JEnum
from py4j.java_gateway import JavaObject, JavaMember

__all__ = ['to_java_int_array', 'to_java_string_array', 'to_java_double_array', 'to_java_color_array',
           'to_java_color', 'split_input_list_from_str', 'split_input_dict_from_str', 'datetime_to_java_date',
           'tuple_to_java_color', 'java_color_to_tuple', 'get_datetime_timestamp', 'java_date_to_datetime',
           'get_red', 'get_green', 'get_blue', 'get_alpha', 'get_unique_name', 'color_to_tuple', 'parse_datetime',
           'tuple_to_color', 'get_datetime_str', 'parse_bool', 'is_equal', 'oj', 'get_struct_time', 'get_datetime',
           'get_day_hour', 'split_input_list_tuple_item_from_str', 'read_int', 'read_float', 'write_int', 'write_float',
           'is_linux', 'is_zero', 'check_lic', 'split_input_int_list_from_str', 'split_input_float_list_from_str',
           'java_array_to_list', 'to_java_2d_array', 'to_java_array', 'make_enum', 'to_java_2d_int_array',
           'to_java_2d_double_array']


def make_enum(typ, value, default_value=None):
    if typ.__base__ is JEnum:
        return typ._make(value, default_value)
    raise ValueError('typ must be Enum Type')


def java_array_to_list(java_array):
    if java_array is not None:
        return list(java_array)
    else:
        return None


def parse_bool(value):
    if isinstance(value, bool):
        return value
    elif isinstance(value, str):
        if value.lower() == 'true':
            return True
        else:
            return False
    else:
        if value:
            return True
        else:
            return False


def to_java_array(values, java_class):
    if values is None:
        return None
    else:
        if not isinstance(values, (list, tuple, set)):
            values = [values]
        _size = len(values)
        java_array = get_gateway().new_array(java_class, _size)
        i = 0
        for value in values:
            java_array[i] = oj(value)
            i += 1
        return java_array


def to_java_2d_int_array(values):
    items = []
    for value in values:
        items.append(list(int(v) for v in value))
    return to_java_2d_array(items, get_jvm().int)


def to_java_2d_double_array(values):
    items = []
    for value in values:
        items.append(list(float(v) for v in value))
    return to_java_2d_array(items, get_jvm().double)


def to_java_2d_array(values, java_class):
    if values is None:
        return None

    if not isinstance(values, (list, tuple, set)):
        values = [values]

    if not isinstance(values[0], (list, tuple, set)):
        java_array = get_gateway().new_array(java_class,
                                             len(values), 1)
        for i, value in enumerate(values):
            java_array[i][0] = value
        return java_array
    else:
        s_size = max(map(lambda l: len(l), values))
        java_array = get_gateway().new_array(java_class, len(values), s_size)
        for i, item_values in enumerate(values):
            for j, item in enumerate(item_values):
                java_array[i][j] = item
        return java_array


def to_java_string_array(values):
    if values is None:
        return None
    else:
        if isinstance(values, str):
            java_array = get_gateway().new_array(get_jvm().java.lang.String, 1)
            java_array[0] = values
            return java_array
        elif isinstance(values, (list, tuple, set)):
            _size = len(values)
            java_array = get_gateway().new_array(get_jvm().java.lang.String, _size)
            i = 0
            for value in values:
                java_array[i] = value
                i += 1
            return java_array
        return None


def to_java_color_array(values):
    if values is None:
        return None
    else:
        if isinstance(values, tuple):
            java_array = get_gateway().new_array(get_jvm().java.awt.Color, 1)
            java_array[0] = get_jvm().java.awt.Color(int(values[0]), int(values[1]),
                                                     int(values[2]), int(values[3]))
            return java_array
        elif isinstance(values, list):
            _size = len(values)
            java_array = get_gateway().new_array(get_jvm().java.lang.String, _size)
            i = 0
            for value in values:
                java_array[i] = get_jvm().java.awt.Color(int(value[0]), int(value[1]),
                                                         int(value[2]), int(value[3]))
                i += 1
            return java_array
        return None


def to_java_color(value):
    if value is None:
        return None
    if isinstance(value, tuple):
        if len(value) == 3:
            return get_jvm().java.awt.Color(int(value[0]), int(value[1]), int(value[2]))
        elif len(value) == 4:
            return get_jvm().java.awt.Color(int(value[0]), int(value[1]), int(value[2]), int(value[3]))
    elif isinstance(value, int):
        return get_jvm().java.awt.Color(value)
    log_warning(
        'cannot convert to java.awt.Color, required tuple of (float,int) or int, but now is ' + str(type(value)))
    return None


def to_java_int_array(values):
    if values is None:
        return None
    else:
        if isinstance(values, int):
            java_array = get_gateway().new_array(get_jvm().int, 1)
            java_array[0] = values
            return java_array
        elif isinstance(values, (list, tuple, set)):
            _size = len(values)
            java_array = get_gateway().new_array(get_jvm().int, _size)
            i = 0
            for value in values:
                try:
                    java_array[i] = int(value)
                except:
                    pass
                i += 1
            return java_array
        return None


def to_java_double_array(values):
    if values is None:
        return None
    else:
        if isinstance(values, str):
            items = split_input_list_from_str(values)
            return to_java_double_array([float(item) for item in items])
        if isinstance(values, float):
            java_array = get_gateway().new_array(get_jvm().double, 1)
            java_array[0] = values
            return java_array
        elif isinstance(values, (list, tuple, set)):
            _size = len(values)
            java_array = get_gateway().new_array(get_jvm().double, _size)
            i = 0
            for value in values:
                try:
                    java_array[i] = float(value)
                except:
                    pass
                i += 1
            return java_array
        return None


def split_input_int_list_from_str(value):
    if isinstance(value, int):
        return [value]
    input_items = split_input_list_from_str(value)
    if input_items is not None:
        return list(int(item) for item in input_items)
    else:
        return None


def split_input_float_list_from_str(value):
    if isinstance(value, (int, float)):
        return [float(value)]
    input_items = split_input_list_from_str(value)
    if input_items is not None:
        return list(float(item) for item in input_items)
    else:
        return None


def split_input_list_from_str(value):
    if isinstance(value, str):
        res = []
        tokens = value.strip().split(";")
        for token in tokens:
            for item in token.split(','):
                res.append(item.strip())
        return res
    elif isinstance(value, (tuple, list, set)):
        return list(value)
    else:
        return None


def split_input_dict_from_str(value):
    if isinstance(value, str):
        res = dict()
        tokens = value.strip().split(",")
        for token in tokens:
            sub_tokens = token.split(';')
            for sub_token in sub_tokens:
                sub_item = sub_token.split(':')
                if len(sub_item) == 2:
                    res[sub_item[0].strip()] = sub_item[1].strip()
        return res
    elif isinstance(value, dict):
        return value
    else:
        return None


def split_input_list_tuple_item_from_str(value):
    if isinstance(value, str):
        res = list()
        tokens = value.strip().split(',')
        for token in tokens:
            sub_tokens = token.split(';')
            for sub_token in sub_tokens:
                sub_item = sub_token.split(':')
                if len(sub_item) == 2:
                    res.append((sub_item[0].strip(), sub_item[1].strip()))
        return res
    elif isinstance(value, (list, tuple)):
        res = list()
        for item in value:
            if isinstance(item, str):
                sub_item = item.split(':')
                if len(sub_item) == 2:
                    res.append((sub_item[0].strip(), sub_item[1].strip()))
            elif isinstance(item, (tuple, list)):
                res.append(tuple(item))
        return res
    else:
        return None


def tuple_to_java_color(value):
    if isinstance(value, tuple):
        if len(value) == 3:
            return get_jvm().java.awt.Color(int(value[0]), int(value[1]), int(value[2]))
        elif len(value) == 4:
            return get_jvm().java.awt.Color(int(value[0]), int(value[1]), int(value[2]), int(value[3]))
    else:
        return None


def java_color_to_tuple(value):
    if value is None:
        return None
    return value.getRed(), value.getGreen(), value.getBlue(), value.getAlpha()


is_little = (sys.byteorder == 'little')


def color_to_tuple(value, is_cpp_format=False):
    # 参考 tuple_to_color 的说明

    if value is None:
        return None
    if isinstance(value, (float, int)):
        value = int(value)
        if is_cpp_format:
            if is_little:
                r = value & 0xFF
                g = (value >> 8) & 0xFF
                b = (value >> 16) & 0xFF
                a = (value >> 24) & 0xFF
            else:
                r = (value >> 24) & 0xFF
                g = (value >> 16) & 0xFF
                b = (value >> 8) & 0xFF
                a = value & 0xFF
        else:
            if value > 0x7FFFFFFF:
                value = value - 0xFFFFFFFF - 1
            a = (value >> 24) & 0xFF
            r = (value >> 16) & 0xFF
            g = (value >> 8) & 0xFF
            b = value & 0xFF
        return r, g, b, a
    elif isinstance(value, (tuple, list)):
        if len(value) == 3:
            return int(value[0]), int(value[1]), int(value[2]), 255
        elif len(value) > 3:
            return int(value[0]), int(value[1]), int(value[2]), int(value[3])
        return None
    else:
        return None


def tuple_to_color(value, is_cpp_format=False):
    if value is None:
        return None
    if isinstance(value, (tuple, list)):
        # tuple 转 int 值时，保持与jni层转换方式一致，不与 C++ 一致
        # 在jni层，排列方式 argb, 在c++层，排列方式为 rgba
        if is_cpp_format:
            if is_little:
                if len(value) == 3:
                    color = (value[0]) | (value[1] << 8) | (value[2] << 16) | (0xFF << 24)
                elif len(value) == 4:
                    color = (value[0]) | (value[1] << 8) | (value[2] << 16) | (value[3] << 24)
                else:
                    return None
            else:
                if len(value) == 3:
                    color = (value[0] << 24) | (value[1] << 16) | (value[2] << 8) | 0xFF
                elif len(value) == 4:
                    color = (value[0] << 24) | (value[1] << 16) | (value[2] << 8) | value[3]
                else:
                    return None
        else:
            if len(value) == 3:
                color = (0xFF << 24) | (value[0] << 16) | (value[1] << 8) | value[2]
            elif len(value) == 4:
                color = (value[3] << 24) | (value[0] << 16) | (value[1] << 8) | value[2]
            else:
                return None
            if color > 0x7FFFFFFF:
                color = color - 0xFFFFFFFF - 1
        return color
    elif isinstance(value, (int, float)):
        return value
    else:
        return None


def get_datetime_timestamp(dt):
    dt = get_datetime(dt)
    if dt is None:
        raise ValueError('invalid datetime value')
    dl = (dt - datetime.datetime(1970, 1, 1))
    return int(dl.total_seconds())


def get_datetime(value):
    if isinstance(value, datetime.datetime):
        return value
    elif isinstance(value, str):
        try:
            return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
        except:
            try:
                return datetime.datetime.strptime(value, '%Y-%m-%d')
            except:
                return None
    elif isinstance(value, int):
        try:
            return datetime.datetime.fromtimestamp(value)
        except:
            return datetime.datetime.fromtimestamp(value / 1000)
    return None


parse_datetime = get_datetime


def get_day_hour(value):
    if isinstance(value, str):
        try:
            return get_day_hour(datetime.datetime.strptime(value, '%H:%M:%S'))
        except:
            pass
    elif isinstance(value, (float, int)) and 0 <= value <= 24:
        return float(value)
    dt = get_datetime(value)
    if dt is None:
        return None
    d1 = datetime.datetime(dt.year, dt.month, dt.day)
    return (dt - d1).seconds / 3600.0


def get_datetime_str(value):
    time_str = None
    if isinstance(value, datetime.datetime):
        time_str = value.strftime('%Y-%m-%d %H:%M:%S')
    elif isinstance(value, str):
        try:
            datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
            time_str = value
        except:
            time_str = None
    elif isinstance(value, int):
        try:
            time_str = datetime.datetime.fromtimestamp(value).strftime('%Y-%m-%d %H:%M:%S')
        except:
            time_str = datetime.datetime.fromtimestamp(value / 1000).strftime('%Y-%m-%d %H:%M:%S')
    return time_str


def datetime_to_java_date(value):
    time_str = get_datetime_str(value)
    if time_str is not None:
        return get_jvm().java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(time_str)
    else:
        return None


def java_date_to_datetime(value):
    if value is None:
        return None
    if isinstance(value, str):
        try:
            return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
        except Exception as e:
            return None
    elif isinstance(value, int):
        try:
            return datetime.datetime.fromtimestamp(value)
        except:
            return datetime.datetime.fromtimestamp(value / 1000)
    sf = get_jvm().java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    str_t = sf.format(value)
    return datetime.datetime.strptime(str_t, '%Y-%m-%d %H:%M:%S')


def get_struct_time(value):
    if isinstance(value, str):
        try:
            return datetime.datetime.strptime(value, '%Y-%m-%d').timetuple()
        except:
            try:
                return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S').timetuple()
            except:
                return None
    elif isinstance(value, time.struct_time):
        return value
    elif isinstance(value, datetime.date) or isinstance(value, datetime.datetime):
        return value.timetuple()
    else:
        return None


def get_red(value):
    return color_to_tuple(value)[0]


def get_green(value):
    return color_to_tuple(value)[1]


def get_blue(value):
    return color_to_tuple(value)[2]


def get_alpha(value):
    return color_to_tuple(value)[3]


def get_unique_name(name):
    str_t = datetime.datetime.now().strftime('%H%M%S')
    import random
    return '%s_%s_%d_%d' % (str(name), str_t, threading.current_thread().ident, random.randint(1, 100))


def is_equal(a, b, d):
    a, b, d = float(a), float(b), float(d)
    temp = a - b
    if d > 0:
        return -d < temp < d
    elif d == 0:
        return a == b
    else:
        return False


def oj(obj):
    if obj is None:
        return None
    if isinstance(obj, (JavaObject, JavaMember)):
        return obj
    return getattr(obj, '_jobject')


def read_int(stream):
    length = stream.read(4)
    if not length:
        raise EOFError
    return struct.unpack("!i", length)[0]


def read_float(stream):
    length = stream.read(8)
    if not length:
        raise EOFError
    return struct.unpack("!d", length)[0]


def write_int(value, stream):
    stream.write(struct.pack("!i", int(value)))
    stream.flush()


def write_float(value, stream):
    stream.write(struct.pack("!d", float(value)))
    stream.flush()


def is_linux():
    import platform
    if platform.system() == "Linux":
        return True
    else:
        return False


def is_zero(value):
    return -1.0e-10 < value < 1.0e-10


def check_lic():
    jvm = get_jvm()
    result = jvm.com.supermap.jsuperpy.license.PythonLicense.check()
    if result.code() == 0:
        if 'PRODUCT_LICENSE_TEXT' not in os.environ.keys():
            license_text = jvm.com.supermap.jsuperpy.license.PythonLicense.getLicenseText()
            if license_text:
                os.environ['PRODUCT_LICENSE_TEXT'] = license_text
        return
    else:
        raise RuntimeError(result.message())


def check_pretrain_lic(model_id):
    jvm = get_jvm()
    result = jvm.com.supermap.jsuperpy.license.PythonLicense.check_pretrain(model_id)
    if result.code() == 0:
        print("Pretrained model license verification passed")
        return
    else:
        raise RuntimeError(result.message())
