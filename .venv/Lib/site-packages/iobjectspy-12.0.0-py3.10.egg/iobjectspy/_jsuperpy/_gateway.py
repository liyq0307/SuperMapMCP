import threading

from py4j.java_gateway import (JavaGateway,
                               CallbackServerParameters,
                               GatewayParameters)
from ._logger import log_info, log_warning
import subprocess
import os
import select
import socket
import platform
import time


def _get_jar_file():
    jar_path = _get_jar_dir()
    jar_name = 'original-iobjects-py4j.jar'
    jar_file = '%s/%s' % (jar_path, jar_name)
    if not os.path.exists(jar_file):
        jar_name = 'iobjects-py4j.jar'
        return '%s/%s' % (jar_path, jar_name)
    else:
        return jar_file


def _get_jar_dir():
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), 'jars').replace('\\', '/')


class _JavaHeartBeatThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.socket_heart = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket_heart.bind(('127.0.0.1', 0))
        self.socket_heart.listen(1)
        self.host, self.port = self.socket_heart.getsockname()

    def run(self):
        self.socket_heart.listen(1)
        try:
            conn, _ = self.socket_heart.accept()
            pid = os.getpid()
            send_data = str(pid).encode('utf-8')
            while True:
                time.sleep(1)
                conn.send(send_data)
                rev_data = conn.recv(128)
                if not rev_data:
                    time.sleep(0.1)
                    continue
                conn.send(send_data)
            conn.close()
        except Exception:
            import traceback
            log_info(traceback.format_exc())
        finally:
            self.socket_heart.close()


class _JavaGatewayLaunchThread(threading.Thread):
    def __init__(self, callback_host, callback_port):
        threading.Thread.__init__(self)
        self.callback_host = callback_host
        self.callback_port = callback_port

    def run(self):
        jar_file = _get_jar_file()
        sysstr = platform.system()
        from . import get_iobjects_java_path
        java_bin_path = get_iobjects_java_path()

        if sysstr == "Windows":
            # comment = 'start /b java -cp "%s" com.supermap.jsuperpy.ApplicationExample %s %s' % (
            #     jar_file, self.callback_host, self.callback_port)
            # comment = 'start java -cp %s/jars/%s com.supermap.jsuperpy.ApplicationExample %s %s' % (
            #    currdir, jar_name, self.callback_host, self.callback_port)
            # print(comment)
            env = os.environ
            if java_bin_path:
                try:
                    env['PATH'] = java_bin_path + ';' + env['PATH']
                except:
                    log_warning('failed set iobjects-java-bin to PATH')

            # subprocess.Popen(comment, shell=True, start_new_session=True, env=env)
            env['JDK_JAVA_OPTIONS'] = '--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED ' \
                                      '--add-opens=jdk.zipfs/jdk.nio.zipfs=ALL-UNNAMED '
            args = ['cmd.exe', '/C', 'start', '/b', 'java', '-cp', jar_file, 'com.supermap.jsuperpy.ApplicationExample',
                    self.callback_host, self.callback_port]
            log_info(' '.join(args))
            subprocess.Popen(args, shell=False, start_new_session=True, env=env)
        elif sysstr == "Linux":
            # comment = ('java -cp %s com.supermap.jsuperpy.ApplicationExample %s %s' %
            #            (jar_file, self.callback_host, self.callback_port))
            # print(comment)
            env = os.environ
            if java_bin_path:
                try:
                    if 'PATH' in env.keys():
                        env['PATH'] = java_bin_path + ':' + env['PATH']
                    else:
                        env['PATH'] = java_bin_path
                except:
                    log_warning('failed set iobjects-java-bin to PATH')
                try:
                    if 'LD_LIBRARY_PATH' in env.keys():
                        env['LD_LIBRARY_PATH'] = java_bin_path + ':' + env['LD_LIBRARY_PATH']
                    else:
                        env['LD_LIBRARY_PATH'] = java_bin_path
                except:
                    log_warning('failed set iobjects-java-bin to LD_LIBRARY_PATH')
            # subprocess.Popen(comment, shell=True, start_new_session=True, env=env)
            env['JDK_JAVA_OPTIONS'] = '--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED ' \
                                      '--add-opens=jdk.zipfs/jdk.nio.zipfs=ALL-UNNAMED '
            args = ['java', '-cp', jar_file, 'com.supermap.jsuperpy.ApplicationExample', self.callback_host,
                    self.callback_port]
            log_info(' '.join(args))
            subprocess.Popen(args, start_new_session=True, env=env, shell=False)
        else:
            raise RuntimeError('Unsupported system : ' + sysstr)


class _GatewayManager(object):
    def __init__(self):
        self._gateway = None
        self._port = 0
        self.lock = threading.Lock()
        self.is_desktop_mode = False
        self.is_outer_gateway = False

    def set_port(self, port):
        if port > 0:
            self.is_desktop_mode = True
            self.is_outer_gateway = True
            self._port = port

    def shutdown(self):
        if not self.is_desktop_mode and not self.is_outer_gateway:
            self.lock.acquire()
            from .data import Workspace
            Workspace.close()
            if self._gateway is not None:
                self._gateway.shutdown()
                print('[iObjectsPy]: Gateway service shutdown successfully')
                self._gateway = None
            else:
                log_info('[iObjectsPy]: No Gateway service is running')
            self.lock.release()

    @staticmethod
    def connect_gateway(gateway_port):
        _gateway = JavaGateway(
            gateway_parameters=GatewayParameters(port=gateway_port, auto_convert=True))
        pnt = _gateway.jvm.com.supermap.data.Point2D()
        del pnt

        _gateway.start_callback_server(CallbackServerParameters(port=0, eager_load=True, daemonize=True))
        return _gateway

    @staticmethod
    def read_int(stream):
        length = stream.read(4)
        if not length:
            raise EOFError
        import struct
        return struct.unpack("!i", length)[0]

    def launch_gateway(self):
        _gateway = None
        try:
            if not self.is_desktop_mode:
                callback_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                callback_socket.bind(('127.0.0.1', 0))
                callback_socket.listen(1)
                callback_host, callback_port = callback_socket.getsockname()

                java_server_launch = _JavaGatewayLaunchThread(callback_host, str(callback_port))
                # java_server_launch.setDaemon(True)
                java_server_launch.start()

                gateway_port = None
                while gateway_port is None:
                    timeout = 1  # (seconds)
                    readable, _, _ = select.select([callback_socket], [], [], timeout)
                    if callback_socket in readable:
                        gateway_connection = callback_socket.accept()[0]
                        gateway_port = _GatewayManager.read_int(gateway_connection.makefile(mode="rb"))
                        gateway_connection.close()
                callback_socket.close()
                self._port = gateway_port

            count = 0
            while _gateway is None and count < 10:
                count += 1
                time.sleep(0.1)
                try:
                    _gateway = _GatewayManager.connect_gateway(self._port)
                except:
                    import traceback
                    traceback.print_exc()
                    _gateway = None

            if _gateway is not None and _gateway.get_callback_server() is not None:
                python_proxy_address = _gateway.get_callback_server().get_listening_address()
                python_proxy_port = _gateway.get_callback_server().get_listening_port()
                _gateway.entry_point.resetPythonPort(python_proxy_address, python_proxy_port)
                print('[iObjectsPy]: The Gateway service started successfully')
                print()

                if not self.is_desktop_mode:
                    heart_beat_server = _JavaHeartBeatThread()
                    heart_beat_server.setDaemon(True)
                    heart_beat_server.start()
                    # time.sleep(0.1)
                    _gateway.entry_point.startHeartBeatClient(heart_beat_server.host, heart_beat_server.port)
            else:
                raise RuntimeError('[iObjectsPy]: Connecting to the Gateway service failed.')
        except:
            import traceback
            traceback.print_exc()
        return _gateway

    @property
    def gateway(self):
        if self._gateway is None:
            self.lock.acquire()
            self._gateway = self.launch_gateway()
            self.lock.release()
            from .env import Env
            Env._set_all_to_java()
        return self._gateway

    def set_gateway(self, gt):
        if self._gateway is None and gt is not None:
            self.lock.acquire()
            self._gateway = gt
            self.is_outer_gateway = True
            self.lock.release()
            from .env import Env
            Env._set_all_to_java()

    def close_callback_server(self):
        pass

    def safe_start_callback_server(self):
        return self.gateway.get_callback_server() is not None
        # self.lock.acquire()
        # _b = True
        # try:
        #     call_back_server = self.gateway.get_callback_server()
        #     if call_back_server is None:
        #         self.gateway.start_callback_server()
        #     else:
        #         if call_back_server.is_shutdown:
        #             self.gateway.restart_callback_server()
        # except:
        #     import traceback
        #     traceback.print_exc()
        #     _b = False
        # finally:
        #     self.lock.release()
        # return _b


_g_gateway_manager = _GatewayManager()


def set_gateway_port(port):
    _g_gateway_manager.set_port(port)


def get_gateway():
    return _g_gateway_manager.gateway


def set_gateway(gateway, func_load_jar):
    _g_gateway_manager.set_gateway(gateway)
    if func_load_jar is not None:
        func_load_jar(_get_jar_file())


def get_jvm():
    return _g_gateway_manager.gateway.jvm


def safe_start_callback_server():
    return _g_gateway_manager.safe_start_callback_server()


def close_callback_server():
    return _g_gateway_manager.close_callback_server()


def gateway_shutdown():
    _g_gateway_manager.shutdown()
