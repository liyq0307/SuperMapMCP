from .conf import *
import inspect
import importlib
import importlib.abc
import sys

__all__ = ['i18n', 'write_docs']

is_dev_debug = True
_locale_key_values = {}


class _Translater:
    def __init__(self):
        try:
            l_module = importlib.import_module(language_module)
            self._translate = getattr(l_module, locale_member_name)
        except:
            self._translate = {}

    def translate(self, key: str, default_value):
        return self._translate.get(key, default_value)


class _TranslateKeyBuilder:
    def __init__(self):
        self._module_name = None
        self._clz_name = None
        self._method_name = None
        self._property_name = None

    def module_name(self, module_name: str):
        self._module_name = module_name
        self._clz_name = None
        self._method_name = None

    def clz_name(self, clz_name: str):
        self._clz_name = clz_name
        self._method_name = None
        self._property_name = None

    def method_name(self, method_name: str):
        self._method_name = method_name
        self._property_name = None

    def property_name(self, property_name: str):
        self._property_name = property_name
        self._method_name = None

    def get_key(self):
        key = self._module_name
        if self._clz_name is not None:
            key = key + '.' + self._clz_name
        if self._method_name is not None:
            key = key + '.' + self._method_name
        elif self._property_name is not None:
            key = key + '.' + self._property_name
        return key


_t_builder = _TranslateKeyBuilder()
_t = _Translater()


def _translate(default_value):
    key = _t_builder.get_key()
    return _t.translate(_t_builder.get_key(), default_value), key


def _is_current_module_member(current_module, member):
    member_module = inspect.getmodule(member)
    return hasattr(member_module, '__name__') and inspect.getmodule(current_module).__name__ == member_module.__name__


def _is_iobjectspy_module(mo):
    mo_module = inspect.getmodule(mo)
    return hasattr(mo_module, '__name__') and 'iobjectspy' in mo_module.__name__


def _is_private(obj):
    if hasattr(obj, '__name__'):
        name = getattr(obj, '__name__')
    else:
        name = str(obj)
    if name.startswith('__'):
        return False
    return name.startswith("_")


def _is_class_method(m):
    return inspect.ismethod(m) and inspect.isclass(m.__self__)


def _translate_method_docstrings(method):
    try:
        _t_builder.method_name(method.__name__)
        if not _is_private(method):
            locale_doc, method_key = _translate(None)
            if is_dev_debug and (method.__name__.startswith('__') and method.__doc__) or (
                    not method.__name__.startswith('__')):
                _locale_key_values[method_key] = method.__doc__
            if locale_doc is not None and len(locale_doc) > 0:
                if _is_class_method(method):
                    method.__func__.__doc__ = locale_doc
                else:
                    method.__doc__ = locale_doc
    except Exception as e:
        import traceback
        print('\n'.join([method.__name__, traceback.format_exc()]))


def is_property(member):
    if type(member) == property:
        return True
    return False


def _filter_translate_member(parent):
    def verify(item):
        name, member = item
        return (not _is_private(name) and
                (_is_iobjectspy_module(member) and _is_current_module_member(parent, member))) or is_property(member)

    return verify


def _translate_property_docstrings(clz, prop_name, prop):
    try:
        _t_builder.clz_name(clz.__name__)
        _t_builder.property_name(prop_name)
        if not _is_private(prop_name) and hasattr(prop, '__doc__') and getattr(prop, '__doc__'):
            locale_doc, property_key = _translate(None)
            if is_dev_debug:
                _locale_key_values[property_key] = prop.__doc__
            if locale_doc is not None and len(locale_doc) > 0:
                prop.__doc__ = locale_doc

    except Exception:
        import traceback
        print('\n'.join([prop_name, traceback.format_exc()]))


def _translate_class_docstrings(clz):
    try:
        _t_builder.clz_name(clz.__name__)
        locale_doc, cls_key = _translate(clz.__doc__)
        if is_dev_debug:
            _locale_key_values[cls_key] = clz.__doc__
        if locale_doc is not None and len(locale_doc) > 0:
            clz.__doc__ = locale_doc
        for name, member in list(filter(_filter_translate_member(clz), inspect.getmembers(clz))):
            if inspect.isfunction(member) or inspect.ismethod(member):
                _translate_method_docstrings(member)
            elif is_property(member):
                _translate_property_docstrings(clz, name, member)
    except Exception as e:
        import traceback
        print(traceback.format_exc())


def _translate_module_docstrings(mo):
    try:
        # if mo.__name__ == 'iobjectspy.ml':
        #     pass
        _t_builder.module_name(mo.__name__)
        locale_doc, model_name_key = _translate(mo.__doc__)
        if is_dev_debug:
            _locale_key_values[model_name_key] = mo.__doc__
        if locale_doc is not None and len(locale_doc) > 0:
            mo.__doc__ = locale_doc
        for name, member in list(filter(_filter_translate_member(mo), inspect.getmembers(mo))):
            if inspect.isclass(member):
                _translate_class_docstrings(member)
            elif inspect.ismethod(member) or inspect.isfunction(member):
                _t_builder.clz_name(None)
                _translate_method_docstrings(member)
    except Exception as e:
        import traceback
        print(traceback.format_exc())


def _hook_iobjectspy_module(mod):
    if _is_iobjectspy_module(mod):
        if inspect.ismodule(mod):
            _translate_module_docstrings(mod)
        elif inspect.isclass(mod):
            _translate_class_docstrings(mod)
        elif inspect.ismethod(mod):
            _translate_method_docstrings(mod)
    return mod


class IObjectsPyLoader(importlib.abc.FileLoader):
    def __init__(self, base_path):
        self._base_path = base_path

    def get_source(self, fullname):
        import io
        file_path = self.get_filename(fullname)
        if os.path.exists(file_path):
            with io.FileIO(file_path, 'r') as f:
                return str(f.read())
        else:
            return ''

    def get_filename(self, fullname):
        tokens = str(fullname).split('.')
        filename = os.path.join(self._base_path, '/'.join(tokens)) + '.py'
        if os.path.exists(filename):
            return filename
        else:
            return os.path.join(self._base_path, '/'.join(tokens)) + '/__init__.py'

    def create_module(self, spec):
        module = importlib.import_module(spec.name)
        _hook_iobjectspy_module(module)
        return module


class IObjectsPyFinder(importlib.abc.PathEntryFinder):
    def __init__(self, base_path):
        self._loader = IObjectsPyLoader(base_path)
        self._skips = set()

    def find_module(self, fullname, path=None):
        if fullname in self._skips:
            return None
        if 'iobjectspy' in fullname:
            self._skips.add(fullname)
            return self._loader
        return None


def i18n(base_path):
    if hook:
        sys.meta_path.insert(0, IObjectsPyFinder(base_path))


def write_docs(path_file):
    fp = open(path_file, 'w', encoding='utf8')
    model_locale = {'_jsuperpy_env_locale': 'iobjectspy._jsuperpy.env',
                    '_jsuperpy_data_locale': 'iobjectspy._jsuperpy.data',
                    '_jsuperpy_analyst_locale': 'iobjectspy._jsuperpy.analyst',
                    '_jsuperpy_mapping_locale': 'iobjectspy._jsuperpy.mapping',
                    '_jsuperpy_enums_locale': 'iobjectspy._jsuperpy.enums',
                    '_jsuperpy_conversions_locale': 'iobjectspy._jsuperpy.conversion',
                    '_iobjectspy_ml_locale': 'iobjectspy.ml',
                    '_iobjectspy_3ddesigner_locale': 'iobjectspy._jsuperpy.threeddesigner'
                    }
    for model_name in model_locale.keys():
        star_tag = model_locale[model_name]
        value = model_name + " = {\n"
        fp.write(value)
        for name in _locale_key_values.keys():
            if name.startswith(star_tag):
                doc = _locale_key_values[name]
                if doc is None:
                    doc = ''
                value = '\"{}\" :\"\"\"{}\"\"\",\n\n'.format(name, doc)
                fp.write(value)
        fp.write("}\n\n")

    fp.write("""iobjectspy_locale = {}

iobjectspy_locale.update(_jsuperpy_env_locale)
iobjectspy_locale.update(_jsuperpy_data_locale)
iobjectspy_locale.update(_jsuperpy_enums_locale)
iobjectspy_locale.update(_jsuperpy_analyst_locale)
iobjectspy_locale.update(_jsuperpy_conversions_locale)
iobjectspy_locale.update(_jsuperpy_mapping_locale)
iobjectspy_locale.update(_iobjectspy_ml_locale)
iobjectspy_locale.update(_iobjectspy_3ddesigner_locale)
""")
    fp.close()
