from iobjectspy._jsuperpy._utils import check_lic
from ._tabular.automl import AutoMLTrainer as Trainer


class AutoMLTabularTrainer:
    def __init__(self, output_model_path, output_model_name, config=None, mode='Explain',
                 algorithms=None, total_time_limit=3600, eval_metric='auto'):
        """
        表格数据训练入口

        :param output_model_path: 输出模型路径
        :param output_model_name: 输出模型名字
        :param mode:工作模式, 支持："Explain`, `Perform`, `Compete`
                    Explain 模式，解释和理解数据的理想选择，它具有许多数据解释，例如决策树可视化，线性模型系数显示，排列重要性和数据的 SHAP 解释。具有学习曲线，重要性图和 SHAP 图
                    Perform 模式，用于构建用于生产的 ML 管道。具有学习曲线和重要性图
                    Compete 模式，用于训练经过整合和堆叠的高度优化的 ML 模型，目的是用于 ML 竞赛。具有学习曲线
        :type str
        :param algorithms:训练使用的算法列表。支持：'Decision Tree', 'Baseline', 'Linear', 'Random Forest', 'Extra Trees',
                               'LightGBM', 'Xgboost', 'CatBoost', 'Neural Network', 'Nearest Neighbors'
        :type list[str]
        :param total_time_limit:训练时的总时间限制，时间单位为秒。
        :type int
        :param eval_metric: 比较模型的指标。不同的分析方法计算一个统一的评估指标，比较优劣。支持：auto，logloss，rmse
                            auto：自动根据分类或回归模型选择 logloss 或 rmse
                            logloss：分类评估指标
                            rmse：回归评估指标
        :type list
        :param config: 训练配置文件
        """
        check_lic()
        self.config = config
        self.output_model_path = output_model_path
        self.output_model_name = output_model_name
        self.algorithms = algorithms
        self.trainer = Trainer(output_model_path, output_model_name, mode, algorithms, total_time_limit, eval_metric,
                               config)

    def train(self, train_data_path):
        """
        模型训练

        :param train_data_path: 训练数据路径

        :return: None

        生成模型将存储在输入的 ‘output_model_path’ 路径下
        """
        self.trainer.train(train_data_path)

    def score(self):
        """
        最优模型得分
        :returns 当为回归模型时，输出R2，当为分类模型时，输出 Accuracy 。
        """
        return self.trainer.score()
