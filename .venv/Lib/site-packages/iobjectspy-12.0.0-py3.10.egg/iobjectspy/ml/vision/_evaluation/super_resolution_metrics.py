# !/usr/bin/env python3
# coding=utf-8
import os.path
from tqdm import tqdm
from iobjectspy.ml.vision._evaluation._base_utils import save_metric_dict_to_attribute_table_sr
from iobjectspy.ml.vision._evaluation._image_reconstruction_metrics import _calculate_psnr,_calculate_ssim,_calculate_fid


def super_resolution_all(inference_data, ground_truth_data,out_data, out_data_name,**kwargs):
    """
        基于输入的真实图像数据和预测图像数据计算结果的psnr值, ssim值, fid值，仅支持影像和影像计算

    """
    # inceptionv3 path
    fid_inception_path = kwargs.pop('fid_inception_path',None)
    if fid_inception_path == None:
        io_fid_inception_path = os.path.abspath(os.path.join('../../../', 'resources_ml', 'evaluation_model','inception-6726825d.pth'))
        desktop_fid_inception_path = os.path.abspath(
            os.path.join('../../../../../', 'resources_ml', 'evaluation_model', 'inception-6726825d.pth'))
        if os.path.exists(io_fid_inception_path):
            fid_inception_path = io_fid_inception_path
        elif os.path.exists(desktop_fid_inception_path):
            fid_inception_path = desktop_fid_inception_path
        else:
            raise FileNotFoundError('The FID inception model is not exist!')
    PSNR,SSIM,FID = 0.0,0.0,0.0
    lenth = len(inference_data)
    for i,j in tqdm(zip(inference_data,ground_truth_data),total=len(inference_data),unit='img'):
        PSNR += _calculate_psnr(j,i)
        SSIM += _calculate_ssim(j,i)
        FID += _calculate_fid(j,i,fid_inception_path)
    metric_dict = {'PSNR': PSNR/lenth, 'SSIM': SSIM/lenth, 'FID': FID/lenth}
    if out_data is not None:
        save_metric_dict_to_attribute_table_sr(metric_dict, out_data, out_data_name)

    return metric_dict


def super_resolution_psnr(inference_data, ground_truth_data,out_data, out_data_name):
    """
        基于输入的真实图像数据和预测图像数据计算原始影像和预测图像的PSNR值，仅支持影像和影像计算
        PSNR（Peak Signal-to-Noise Ratio）是一种用于衡量图像或信号质量的指标。它通常用于评估一幅图像与原始图像之间的相似度，尤其是在图像压缩和重建领域。
        PSNR值在20以下，20-30，30+，分别体现两组图像人眼可见有明显差异，细微差异和很难察觉差异等阶段。
        PSNR的值越高，表示两幅图像之间的相似度越高，质量越好。
    """
    PSNR=0
    lenth = len(inference_data)
    for i,j in tqdm(zip(inference_data,ground_truth_data),total=len(inference_data),unit='img'):
        PSNR += _calculate_psnr(j,i)
    metric_dict = {'PSNR': PSNR/lenth}
    if out_data is not None:
        save_metric_dict_to_attribute_table_sr(metric_dict, out_data, out_data_name)

    return metric_dict


def super_resolution_ssim(inference_data, ground_truth_data, out_data, out_data_name):
    """
        基于输入的真实图像数据和预测图像数据计算原始图像和预测图像的SSIM值，仅支持影像和影像计算
        结构相似性指数（Structural Similarity Index，简称SSIM）是一种用于衡量两幅图像之间相似度的指标，它不仅考虑了亮度、对比度，还考虑了结构信息。SSIM通常用于图像质量评估，图像压缩和图像增强等领域。
    """
    SSIM=0
    lenth = len(inference_data)
    for i,j in tqdm(zip(inference_data,ground_truth_data),total=len(inference_data),unit='img'):
        SSIM += _calculate_ssim(j,i)
    metric_dict = {'SSIM': SSIM/lenth}
    if out_data is not None:
        save_metric_dict_to_attribute_table_sr(metric_dict, out_data, out_data_name)

    return metric_dict


def super_resolution_fid(inference_data, ground_truth_data,out_data, out_data_name,**kwargs):
    """
        基于输入的真实图像数据和预测图像数据计算原始图像和预测图像的FID值，仅支持影像和影像计算
        Frechet Inception 距离得分（Frechet Inception Distance score，FID）是计算真实图像和生成图像的特征向量之间距离的一种度量。
        FID 从原始图像的计算机视觉特征的统计方面的相似度来衡量两组图像的相似度，这种视觉特征是使用 Inception v3 图像分类模型计算的得到的。
        分数越低代表两组图像越相似，或者说二者的统计量越相似，FID 在最佳情况下的得分为 0.0，表示两组图像相同。
    """
    # inceptionv3 path
    fid_inception_path = kwargs.pop('fid_inception_path',None)
    if fid_inception_path == None:
        io_fid_inception_path = os.path.abspath(os.path.join('../../../', 'resources_ml', 'evaluation_model','inception-6726825d.pth'))
        desktop_fid_inception_path = os.path.abspath(
            os.path.join('../../../../../', 'resources_ml', 'evaluation_model', 'inception-6726825d.pth'))
        if os.path.exists(io_fid_inception_path):
            fid_inception_path = io_fid_inception_path
        elif os.path.exists(desktop_fid_inception_path):
            fid_inception_path = desktop_fid_inception_path
        else:
            raise FileNotFoundError('The FID inception model is not exist!')
    FID = 0
    lenth = len(inference_data)
    for i,j in tqdm(zip(inference_data,ground_truth_data),total=len(inference_data),unit='img'):
        FID += _calculate_fid(j,i,fid_inception_path)
    metric_dict = {'FID': FID/lenth}
    if out_data is not None:
        save_metric_dict_to_attribute_table_sr(metric_dict, out_data, out_data_name)

    return metric_dict