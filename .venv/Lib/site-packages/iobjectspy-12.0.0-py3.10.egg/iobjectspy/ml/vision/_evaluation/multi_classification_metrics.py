# !/usr/bin/env python3
# coding=utf-8

from iobjectspy.ml.vision._evaluation._base_utils import save_metric_dict_to_attribute_table
from iobjectspy.ml.vision._evaluation._seg_metrics import _seg_all, _seg_iou, _seg_pixel_acc, _seg_confusion_matrix, \
    _seg_kappa, \
    _seg_f1


def multi_classification_all(inference_data, ground_truth_data, inference_class_value_field,
                             ground_truth_class_value_field,
                             out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的iou, pixel_acc, f1, dice, kappa, confusion_matrix，支持影像和影像数据计算，矢量和矢量数据计算

    """

    PA, IoU, F1, Kappa, confusion_matrix = _seg_all(inference_data, ground_truth_data,
                                                                 true_field_name=ground_truth_class_value_field,
                                                                 predict_field_name=inference_class_value_field,
                                                                 compute_type='multi', average='macro')


    mPA=dict([(key,PA[key]) for key in ['ALL_Classes']])
    PA.pop('ALL_Classes')
    mIoU=dict([(key,IoU[key]) for key in ['ALL_Classes']])
    IoU.pop('ALL_Classes')
    metric_dict = {'F1': F1,'CPA': PA, 'IoU': IoU,  'Kappa': Kappa, 'mPA': mPA,'mIoU':mIoU}
    if out_data is not None:
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict


def multi_classification_iou(inference_data, ground_truth_data, inference_class_value_field,
                             ground_truth_class_value_field,
                             out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        IoU分数是对象类别分割问题的标准性能度量,取值范围在0到1之间,越接近1说明预测结果越接近真实数据。 给定一组图像，IoU测量给出了在该组图像中存在的对象的预测区域和地面实况区域之间的相似性，并且由以下等式定义：IoU=TP/(FP+TP+FN),其中TP，FP和FN分别表示真阳性，假阳性和假阴性计数。

    """

    IoU = _seg_iou(inference_data, ground_truth_data, true_field_name=ground_truth_class_value_field,
                   predict_field_name=inference_class_value_field, compute_type='multi',
                   average='macro')
    IoU.pop('ALL_Classes')
    metric_dict = {'IoU': IoU}
    if out_data is not None:
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict

def multi_classification_mean_iou(inference_data, ground_truth_data, inference_class_value_field,
                             ground_truth_class_value_field,
                             out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        IoU分数是对象类别分割问题的标准性能度量,取值范围在0到1之间,越接近1说明预测结果越接近真实数据。 给定一组图像，IoU测量给出了在该组图像中存在的对象的预测区域和地面实况区域之间的相似性，并且由以下等式定义：IoU=TP/(FP+TP+FN),其中TP，FP和FN分别表示真阳性，假阳性和假阴性计数。

    """

    IoU = _seg_iou(inference_data, ground_truth_data, true_field_name=ground_truth_class_value_field,
                   predict_field_name=inference_class_value_field, compute_type='multi',
                   average='macro')
    mIoU=dict([(key,IoU[key]) for key in ['ALL_Classes']])
    metric_dict = {'mIoU': mIoU}
    if out_data is not None:
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict

def multi_classification_pixel_acc(inference_data, ground_truth_data, inference_class_value_field,
                                   ground_truth_class_value_field,
                                   out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        像素精度是指预测正确的像素与总的像素个数之间的比值,取值范围在0到1之间,越接近1说明预测结果越接近真实数据.

    """

    CPA = _seg_pixel_acc(inference_data, ground_truth_data, true_field_name=ground_truth_class_value_field,
                               predict_field_name=inference_class_value_field, compute_type='multi',
                               average='macro')
    CPA.pop('ALL_Classes')
    metric_dict = {'CPA': CPA}
    if out_data is not None:
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict

def multi_classification_mean_pixel_acc(inference_data, ground_truth_data, inference_class_value_field,
                                   ground_truth_class_value_field,
                                   out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        像素精度是指预测正确的像素与总的像素个数之间的比值,取值范围在0到1之间,越接近1说明预测结果越接近真实数据.

    """

    PA = _seg_pixel_acc(inference_data, ground_truth_data, true_field_name=ground_truth_class_value_field,
                               predict_field_name=inference_class_value_field, compute_type='multi',
                               average='macro')
    mPA=dict([(key,PA[key]) for key in ['ALL_Classes']])
    metric_dict = {'mPA': mPA}
    if out_data is not None:
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict

def multi_classification_f1(inference_data, ground_truth_data, inference_class_value_field,
                            ground_truth_class_value_field,
                            out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        F1分数（F1 Score），是统计学中用来衡量分类模型精确度的一种指标,取值范围在0到1之间,越接近1说明预测结果越接近真实数据。它同时兼顾了分类模型的精确率和召回率。F1分数可以看作是模型精确率和召回率的一种调和平均，它的最大值是1，最小值是0。可由以下等式定义:f1=2*(precision*recall)/(precision+recall),其中precision代表精确率,recall代表召回率.

    """

    F1 = _seg_f1(inference_data, ground_truth_data, true_field_name=ground_truth_class_value_field,
                 predict_field_name=inference_class_value_field, compute_type='multi',
                 average='macro')
    metric_dict = {'F1': F1}
    if out_data is not None:
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict




def multi_classification_kappa(inference_data, ground_truth_data, inference_class_value_field,
                               ground_truth_class_value_field,
                               out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        Kappa系数用于一致性检验，也可以用于衡量分类精度，kappa计算结果为-1~1，但通常kappa是落在 0~1 间，可分为五组来表示不同级别的一致性：0.0~0.20极低的一致性(slight)、0.21~0.40一般的一致性(fair)、0.41~0.60 中等的一致性(moderate)、0.61~0.80 高度的一致性(substantial)和0.81~1几乎完全一致(almost perfect)。kappa系数的计算是基于混淆矩阵的,它是通过把所有地表真实分类中的像元总数（N）乘以混淆矩阵对角线（Xkk）的和，再减去某一类地表真实像元总数与该类中被分类像元总数之积对所有类别求和的结果，再除以总像元数的平方减去某一类地表真实像元总数与该类中被分类像元总数之积对所有类别求和的结果所得到的.

    """

    Kappa = _seg_kappa(inference_data, ground_truth_data, true_field_name=ground_truth_class_value_field,
                       predict_field_name=inference_class_value_field, compute_type='multi')
    if out_data is not None:
        metric_dict = {'Kappa': Kappa}
        save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict


def multi_classification_confusion_matrix(inference_data, ground_truth_data, inference_class_value_field,
                                          ground_truth_class_value_field,
                                          out_data, out_data_name):
    """
        基于输入的真实标签数据和预测标签数据计算结果的IOU得分，支持影像和影像数据计算，矢量和矢量数据计算
        混淆矩阵也称误差矩阵，是表示精度评价的一种标准格式，用n行n列的矩阵形式来表示；在图像精度评价中，主要用于比较分类结果和实际测得值，可以把分类结果的精度显示在一个混淆矩阵里面。混淆矩阵是通过将每个实测像元的位置和分类与分类图像中的相应位置和分类相比较计算的。
    """

    confusion_matrix = _seg_confusion_matrix(inference_data, ground_truth_data,
                                             true_field_name=ground_truth_class_value_field,
                                             predict_field_name=inference_class_value_field, compute_type='multi')
    metric_dict = {'confusion_matrix': confusion_matrix}
    # if out_data is not None:
    #     save_metric_dict_to_attribute_table(metric_dict, out_data, out_data_name)

    return metric_dict
