# Copyright (c) OpenMMLab. All rights reserved.
import os
# from mmdet.registry import DATASETS
# from mmdet.datasets.base_det_dataset import BaseDataset
from mmengine.registry import DATASETS
from mmengine.dataset.base_dataset import BaseDataset
from typing import List
import glob


@DATASETS.register_module()
class SMODDataset(BaseDataset):
    """
    正框算法：   Cascade Rtmdet
    旋转框算法：  Redet
    均可使用此数据集
    """
    def __init__(self, **kwargs):
        self.diff_thr = 100
        self.model_type = kwargs.get('model_type')
        del kwargs['model_type']
        super(SMODDataset, self).__init__(**kwargs)

    def load_data_list(self) -> List[dict]:

        data_list = os.listdir(self.data_prefix['img_path'])
        temp_data = os.path.join(self.data_prefix['img_path'], data_list[0])
        suffix = os.path.splitext(temp_data)[-1]

        cls_map = {c: i
                   for i, c in enumerate(self.metainfo['classes'])
                   }  # in mmdet v2.0 label is 0-based

        data_list = []
        if self.ann_file == '':
            for data in data_list:
                data_info = {}
                data_info['file_name'] = data
                data_info['img_id'] = os.path.splitext(data)[0]
                data_info['img_path'] = os.path.join(self.data_prefix['img_path'], data)
                instance = dict(bbox=[], bbox_label=[], ignore_flag=0)
                data_info['instances'] = [instance]
                data_list.append(data_info)

            return data_list
        else:
            txt_files = glob.glob(os.path.join(self.ann_file, '*.txt'))
            if len(txt_files) == 0:
                raise ValueError('There is no txt file in '
                                 f'{self.ann_file}')
            for txt_file in txt_files:
                data_info = {}
                img_id = os.path.split(txt_file)[1][:-4]
                data_info['img_id'] = img_id
                img_name = img_id + f'{suffix}'
                data_info['file_name'] = img_name
                data_info['img_path'] = os.path.join(self.data_prefix['img_path'],
                                                 img_name)

                instances = []
                with open(txt_file, encoding='utf-8') as f:
                    s = f.readlines()
                    for si in s:
                        instance = {}
                        bbox_info = si.split()
                        if self.model_type == 'CascadeRCNN' or self.model_type == 'RTMDet':
                            instance['bbox'] = self.find_bounds([float(i) for i in bbox_info[:8]])
                        else:
                            instance['bbox'] = [float(i) for i in bbox_info[:8]]
                        instance['bbox_label'] = cls_map[bbox_info[8]]
                        difficulty = int(bbox_info[9])
                        if difficulty > self.diff_thr:
                            instance['ignore_flag'] = 1
                        else:
                            instance['ignore_flag'] = 0
                        instances.append(instance)
                data_info['instances'] = instances
                data_list.append(data_info)

            return data_list

    def find_bounds(self, coords) -> List[dict]:
        x_coords = coords[0::2]
        y_coords = coords[1::2]

        x_min = min(x_coords)
        y_min = min(y_coords)
        x_max = max(x_coords)
        y_max = max(y_coords)

        return [x_min, y_min, x_max, y_max]
