from abc import ABC, abstractmethod
from .point_sampling_algorithm import *


class Sample(ABC):
    def __init__(self, SamVectorEstimation):
        self.sve = SamVectorEstimation

    @abstractmethod
    def set_up(self):
        pass


class LocalSimilaritySample(Sample):
    def set_up(self, **kwargs):
        self.sve.sam_mask_threshold = 0.0
        self.sve.sam_iou_thresh = kwargs.get('sam_iou_thresh', 0.75)
        self.sve.sam_bbox_nms_thresh = kwargs.get('sam_bbox_nms_thresh', 0.7)
        self.sve.sam_filter_edge = kwargs.get('sam_filter_edge', False)
        self.sve.mask_area_thresh = kwargs.get('mask_area_thresh', 0)
        self.sve.tile_open_kernel = kwargs.get('tile_open_kernel', 5)
        self.sve.tile_open_iterations = kwargs.get('tile_open_iterations', 10)
        self.sve.post_process = kwargs.get('post_process', True)
        self.sve.morph_process_kernel = kwargs.get('morph_process_kernel', 3)
        self.sve.morph_process_iterations = kwargs.get('morph_process_iterations', 5)
        self.sve.point_num = kwargs.get('point_num', 100)
        self.sve.bias = kwargs.get('bias', 'large')

    def sample(self, tile_bgr, tile_promptdata, point_nm):
        points, labels = homogeneous_region_sampling(tile_bgr, tile_promptdata, point_nm)
        return points, labels


class EqualDistanceSample(Sample):
    def set_up(self, **kwargs):
        self.sve.sam_mask_threshold = 0.0
        self.sve.sam_iou_thresh = kwargs.get('sam_iou_thresh', 0.75)
        self.sve.sam_bbox_nms_thresh = kwargs.get('sam_bbox_nms_thresh', 0.7)
        self.sve.sam_filter_edge = kwargs.get('sam_filter_edge', True)
        self.sve.mask_area_thresh = kwargs.get('mask_area_thresh', 0)
        self.sve.tile_open_kernel = kwargs.get('tile_open_kernel', 5)
        self.sve.tile_open_iterations = kwargs.get('tile_open_iterations', 10)
        self.sve.post_process = kwargs.get('post_process', False)
        self.sve.morph_process_kernel = kwargs.get('morph_process_kernel', 3)
        self.sve.morph_process_iterations = kwargs.get('morph_process_iterations', 5)
        self.sve.point_num = kwargs.get('point_num', 256)
        self.sve.bias = kwargs.get('bias', 'small')

    def sample(self, tile_bgr, tile_promptdata, point_nm):
        points, labels = grid_uniform_sampling(tile_bgr, tile_promptdata, point_nm)
        return points, labels
