from .cd_dataset import CDDataset
from .seg_dataset import SegDataset


class DatasetFactory:
    @staticmethod
    def create_dataset(dataset_type,
                       sda_path,
                       data_split,
                       augmentation,
                       train_size,
                       mean,
                       std,
                       ignore_label, **kwargs):
        if dataset_type == 'general_change_detection':
            return CDDataset(sda_path, data_split,
                             augmentation, train_size,
                             mean, std, ignore_label)
        else:
            return SegDataset(sda_path, data_split, augmentation, train_size, mean,
                              std, ignore_label)


class DatasetBuilder:
    def __init__(self, sda_path, sda_data_config, output_bands):
        self.sda_path = sda_path
        self.data_type = sda_data_config.dataset.data_type
        self.tile_size = sda_data_config.dataset.tile_size
        self.mean = sda_data_config.dataset.image_mean
        self.std = sda_data_config.dataset.image_std
        self.ignore_label = 0 if output_bands == 1 else 255

    def get_train_dataset(self):
        return DatasetFactory.create_dataset(
            self.data_type,
            self.sda_path,
            data_split='train',
            augmentation=True,
            train_size=[self.tile_size, self.tile_size],
            mean=self.mean,
            std=self.std,
            ignore_label=self.ignore_label
        )

    def get_valid_dataset(self):
        return DatasetFactory.create_dataset(
            self.data_type,
            self.sda_path,
            data_split='val',
            augmentation=False,
            train_size=[self.tile_size, self.tile_size],
            mean=self.mean,
            std=self.std,
            ignore_label=self.ignore_label
        )
