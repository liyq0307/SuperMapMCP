import sys
import time
import torch
from tqdm import tqdm as tqdm
import torch.distributed as dist
from .utils import AverageMeter, accuracy, one_hot, adjust_learning_rate
import torch.nn.functional as F

class Epoch:

    def __init__(self, model, loss, stage_name, device='cpu', verbose=True):
        self.model = model
        self.loss = loss
        self.stage_name = stage_name
        self.verbose = verbose
        self.device = device

        self._to_device()

    def _to_device(self):
        self.model.to(self.device)
        self.loss.to(self.device)

    def _format_logs(self, logs):
        str_logs = ['{} - {:.4}'.format(k, v) for k, v in logs.items()]
        s = ', '.join(str_logs)
        return s

    def batch_update(self, x, y):
        raise NotImplementedError

    def on_epoch_start(self):
        pass

    def main_process(self, multiprocessing_distributed, Rank):
        return not multiprocessing_distributed or (multiprocessing_distributed and Rank == 0)

    def run(self, dataloader, multiprocessing_distributed, Rank):
        self.multiprocessing_distributed = multiprocessing_distributed
        self.Rank = Rank
        self.on_epoch_start()

        logs = {}
        loss_meter = AverageMeter()
        count_meter = AverageMeter()
        total_meter = AverageMeter()
        metrics_meters = {'acc': AverageMeter()}

        with tqdm(dataloader, desc=self.stage_name, file=sys.stdout, disable=not (self.verbose)) as iterator:
            for x, y in iterator:
                if self.device == 'cuda':
                    x, y = x.cuda(non_blocking=True), y.cuda(non_blocking=True)
                else:
                    x, y = x.to(self.device), y.to(self.device)
                if str(self.loss) != 'CrossEntropyLoss()':
                    target = one_hot(y, num_classes=y.size([0]), device=self.device)
                else:
                    target = y
                loss, y_pred = self.batch_update(x, target)
                # update lr logs
                if hasattr(self, 'optimizer'):
                    lr = self.optimizer.param_groups[0]['lr']
                    s = self.optimizer.state_dict()
                    lr_logs = {'lr': lr}
                    logs.update(lr_logs)

                # update loss logs and metrics logs
                n = x.size(0)
                acc1 = accuracy(F.softmax(y_pred, dim=-1), y)[0]
                total = acc1 * n  # quantity correctly predicted in the batch
                if self.multiprocessing_distributed:
                    loss = loss * n  # not considering ignore pixels
                    count = y.new_tensor([n], dtype=torch.long)
                    dist.barrier()
                    dist.all_reduce(loss), dist.all_reduce(count), dist.all_reduce(total)
                    n = count.item()
                    loss = loss / n
                count = n
                count_meter.update(count)
                total_meter.update(total.item())
                loss_meter.update(loss.item(), count)
                metrics_meters['acc'].update(total_meter.sum / count_meter.sum)
                loss_logs = {'loss': loss_meter.avg}
                metrics_logs = {'acc': metrics_meters['acc'].val}
                logs.update(loss_logs)
                logs.update(metrics_logs)

                if self.verbose:
                    s = self._format_logs(logs)
                    iterator.set_postfix_str(s)
        return logs


class TrainEpoch(Epoch):

    def __init__(self, model, loss, optimizer, device='cpu', verbose=True, update_freq=1,
                 base_lr=None, scheduler=None, **kwargs):
        super().__init__(
            model=model,
            loss=loss,
            stage_name='train',
            device=device,
            verbose=verbose,
        )
        self.optimizer = optimizer
        self.scheduler = scheduler
        self.base_lr = base_lr
        self.init_lr = self.optimizer.param_groups[0]['lr']
        self.global_step = kwargs.get('start_epoch')[0] * kwargs.get('start_epoch')[1]
        self.update_freq = update_freq # 梯度累加，增大batchsize
        self.lr_sh = kwargs.get('lr_sh')

    def on_epoch_start(self):
        self.model.train()

    def batch_update(self, x, y):
        self.global_step += 1
        self.scheduler(self.optimizer, self.global_step)
        self.optimizer.zero_grad()
        prediction = self.model.forward(x)
        loss = self.loss(prediction, y)
        if not self.multiprocessing_distributed:
            loss = torch.mean(loss)
        loss.backward()
        if self.global_step % self.update_freq == 0:
            self.optimizer.step()
        # self.optimizer.step()
        if self.device == 'cuda':
            torch.cuda.synchronize()

        return loss, prediction


class ValidEpoch(Epoch):

    def __init__(self, model, loss, device='cpu', verbose=True):
        super().__init__(
            model=model,
            loss=loss,
            stage_name='valid',
            device=device,
            verbose=verbose,
        )

    def on_epoch_start(self):
        self.model.eval()

    def batch_update(self, x, y):
        with torch.no_grad():
            prediction = self.model.forward(x)
            loss = self.loss(prediction, y)
        return loss, prediction


