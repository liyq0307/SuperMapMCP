import torch
import torch.nn as nn
import torch.nn.functional as F


class Conv3x3GNReLU(nn.Module):
    def __init__(self, in_channels, out_channels, upsample=False):
        super().__init__()
        self.upsample = upsample
        self.block = nn.Sequential(
            nn.Conv2d(
                in_channels, out_channels, (3, 3), stride=1, padding=1, bias=False
            ),
            nn.GroupNorm(32, out_channels),
            nn.ReLU(inplace=True),
        )

    def forward(self, x):
        x = self.block(x)
        if self.upsample:
            x = F.interpolate(x, scale_factor=2, mode="bilinear", align_corners=True)
        return x


class FPNBlock(nn.Module):
    def __init__(self, pyramid_channels, skip_channels):
        super().__init__()
        self.skip_conv = nn.Sequential(
            nn.Conv2d(skip_channels, pyramid_channels, kernel_size=1),
            nn.GroupNorm(32, pyramid_channels),
            nn.ReLU())

    def forward(self, x, skip=None):
        x = F.interpolate(x, scale_factor=2, mode="nearest")
        skip = self.skip_conv(skip)
        x = x + skip
        return x


class SegmentationBlock(nn.Module):
    def __init__(self, in_channels, out_channels, n_upsamples=0):
        super().__init__()

        blocks = [Conv3x3GNReLU(in_channels, out_channels, upsample=bool(n_upsamples))]

        if n_upsamples > 1:
            for _ in range(1, n_upsamples):
                blocks.append(Conv3x3GNReLU(out_channels, out_channels, upsample=True))

        self.block = nn.Sequential(*blocks)

    def forward(self, x):
        return self.block(x)


class MergeBlock(nn.Module):
    def __init__(self, policy, in_channels, out_channels):
        super().__init__()
        if policy not in ["add", "cat"]:
            raise ValueError(
                "`merge_policy` must be one of: ['add', 'cat'], got {}".format(
                    policy
                )
            )
        if policy == 'cat':
            in_channels = in_channels * 4
        self.policy = policy
        self.last_conv = Conv3x3GNReLU(in_channels, out_channels)

    def forward(self, x):
        if self.policy == 'add':
            return self.last_conv(sum(x))
        elif self.policy == 'cat':
            return self.last_conv(torch.cat(x, dim=1))
        else:
            raise ValueError(
                "`merge_policy` must be one of: ['add', 'cat'], got {}".format(self.policy)
            )


class UPerNetDecoder(nn.Module):
    def __init__(
            self,
            encoder_channels,
            encoder_depth=5,
            pyramid_channels=256,
            segmentation_channels=128,
            dropout=0.1,
            merge_policy="cat",
            siame_encoder=True
    ):
        super().__init__()
        if encoder_channels[-4] > 64:
            segmentation_channels = 256
        self.out_channels = segmentation_channels
        self.siame_encoder = siame_encoder
        self.head = UperNetHead(encoder_channels, encoder_depth, pyramid_channels, segmentation_channels, dropout, merge_policy)

    def forward(self, *features):
        x = self.head(features)
        return x

class UperNetHead(nn.Module):
    def __init__(
            self,
            encoder_channels,
            encoder_depth=5,
            pyramid_channels=256,
            segmentation_channels=128,
            dropout=0.1,
            merge_policy="cat",
    ):
        super(UperNetHead, self).__init__()
        if encoder_channels[-4] > 64:
            segmentation_channels = 256
            pyramid_channels = 256
        self.out_channels = segmentation_channels
        if encoder_depth < 3:
            raise ValueError("Encoder depth for FPN decoder cannot be less than 3, got {}.".format(encoder_depth))

        encoder_channels = encoder_channels[::-1]
        encoder_channels = encoder_channels[:encoder_depth + 1]

        self.p5 = PyramidPooling(encoder_channels[0], pyramid_channels, norm_layer=nn.GroupNorm)
        self.p4 = FPNBlock(pyramid_channels, encoder_channels[1])
        self.p3 = FPNBlock(pyramid_channels, encoder_channels[2])
        self.p2 = FPNBlock(pyramid_channels, encoder_channels[3])

        self.fpn_out2 = Conv3x3GNReLU(pyramid_channels, segmentation_channels)
        self.fpn_out3 = Conv3x3GNReLU(pyramid_channels, segmentation_channels)
        self.fpn_out4 = Conv3x3GNReLU(pyramid_channels, segmentation_channels)
        self.merge = MergeBlock(merge_policy, segmentation_channels, segmentation_channels)


    def forward(self, features):
        c2, c3, c4, c5 = features[-4:]

        p5 = self.p5(c5)
        p4 = self.p4(p5, c4)
        p3 = self.p3(p4, c3)
        p2 = self.p2(p3, c2)

        feature_pyramid = [p5]
        out4 = self.fpn_out4(p4)
        feature_pyramid.append(out4)
        out3 = self.fpn_out3(p3)
        feature_pyramid.append(out3)
        out2 = self.fpn_out2(p2)
        feature_pyramid.append(out2)

        feature_pyramid.reverse()  # [P2 - P5]
        output_size = feature_pyramid[0].size()[2:]
        fusion_list = [feature_pyramid[0]]

        for i in range(1, len(feature_pyramid)):
            fusion_list.append(nn.functional.interpolate(
                feature_pyramid[i],
                output_size,
                mode='bilinear', align_corners=True))

        x = self.merge(fusion_list)

        return x
class PyramidPooling(nn.Module):
    """
    Reference:
        Zhao, Hengshuang, et al. *"Pyramid scene parsing network."*
    """

    def __init__(self, in_channels, out_channels, norm_layer):
        super(PyramidPooling, self).__init__()
        self.pool1 = nn.AdaptiveAvgPool2d(1)
        self.pool2 = nn.AdaptiveAvgPool2d(2)
        self.pool3 = nn.AdaptiveAvgPool2d(3)
        self.pool4 = nn.AdaptiveAvgPool2d(6)

        self.conv1 = nn.Sequential(nn.Conv2d(in_channels, out_channels, 1, bias=False),
                                   norm_layer(32, out_channels),
                                   nn.ReLU(True))
        self.conv2 = nn.Sequential(nn.Conv2d(in_channels, out_channels, 1, bias=False),
                                   norm_layer(32, out_channels),
                                   nn.ReLU(True))
        self.conv3 = nn.Sequential(nn.Conv2d(in_channels, out_channels, 1, bias=False),
                                   norm_layer(32, out_channels),
                                   nn.ReLU(True))
        self.conv4 = nn.Sequential(nn.Conv2d(in_channels, out_channels, 1, bias=False),
                                   norm_layer(32, out_channels),
                                   nn.ReLU(True))
        self.bottleneck = nn.Sequential(
            nn.Conv2d(in_channels + 4 * out_channels, out_channels, kernel_size=3, padding=1, dilation=1, bias=False),
            norm_layer(32, out_channels),
            nn.ReLU(),
            nn.Dropout2d(0.1)
        )

    def forward(self, x):
        _, _, h, w = x.size()
        feat1 = F.interpolate(self.conv1(self.pool1(x)), (h, w), mode='bilinear', align_corners=True)
        feat2 = F.interpolate(self.conv2(self.pool2(x)), (h, w), mode='bilinear', align_corners=True)
        feat3 = F.interpolate(self.conv3(self.pool3(x)), (h, w), mode='bilinear', align_corners=True)
        feat4 = F.interpolate(self.conv4(self.pool4(x)), (h, w), mode='bilinear', align_corners=True)
        return self.bottleneck(torch.cat((x, feat1, feat2, feat3, feat4), 1))
