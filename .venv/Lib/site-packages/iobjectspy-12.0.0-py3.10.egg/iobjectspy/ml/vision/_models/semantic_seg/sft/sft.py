from abc import ABC, abstractmethod


class SupervisedFineTune(ABC):
    def __init__(self, model, finetune_module_type, **kwargs):
        self.finetune_module_type = finetune_module_type

    @abstractmethod
    def perpare_finetune(self, **kwargs):
        raise NotImplementedError("Please implement the perpare_finetune method.")


class SupervisedFineTuneFactory:
    @staticmethod
    def create(model_name, model, finetune_module_type, **kwargs):
        if model_name == 'sam':
            from .._torch_models.sam import SamLora
            return SamLora(model, finetune_module_type, **kwargs).model
        elif model_name == 'segformer':
            from .._torch_models.segformer import SegformerLora
            return SegformerLora(model, finetune_module_type, **kwargs).model
        elif model_name == 'mask2former':
            from .._torch_models.mask2former import Mask2formerLora
            return Mask2formerLora(model, finetune_module_type, **kwargs).model
        else:
            raise NotImplementedError(f"{model_name} currently does not support fine-tuning.")
