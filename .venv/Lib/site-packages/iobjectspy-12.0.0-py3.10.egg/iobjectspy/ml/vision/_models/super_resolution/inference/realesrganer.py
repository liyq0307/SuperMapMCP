import torch
import numpy as np
from ...._models.device_utils import Device_type


class RealESRGANer():
    """A helper class for upsampling images with RealESRGAN."""
    def __init__(self,
                 scale,
                 model_path,
                 gpus,
                 model=None,
                 device='cuda',
                 is_multi_gpu=False):
        self.model = model
        self.scale = scale
        self.gpus = gpus
        self.device = device
        self.is_multi_gpu = is_multi_gpu
        self.half = False

        loadnet = torch.load(model_path, map_location=torch.device('cpu'))
        # prefer to use params_ema
        if 'params_ema' in loadnet:
            keyname = 'params_ema'
        else:
            keyname = 'params'

        self.model.load_state_dict(loadnet[keyname], strict=True)
        self.model.eval()
        self.model.cpu() if self.device == 'cpu' else self.model.to(self.device)
        if self.is_multi_gpu:
            self.model = Device_type.dataparallel(self.model,self.gpus)
        if self.half:
            self.model = self.model.half()

    def infer(self, img):
        out_tensor = self.process(img)
        output = out_tensor.float().cpu().clamp_(0, 1).numpy()
        output = (output * 255.0).round().astype(np.uint8)
        return output

    @torch.no_grad()
    def process(self, img):
        img = img.to(self.device)
        img = img / 255
        if self.half:
            img.half()
        with torch.no_grad():
            out_tensor = self.model(img)
        return out_tensor
