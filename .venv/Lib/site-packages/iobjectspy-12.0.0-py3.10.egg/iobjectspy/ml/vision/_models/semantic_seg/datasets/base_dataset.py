import os
from abc import abstractmethod

from torch.utils.data import Dataset

from .....toolkit._toolkit import get_config_from_yaml


class BaseDataset(Dataset):
    def __init__(
            self,
            sda_path,
            data_split='train',
            augmentation=False,
            train_size=None,
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225],
            ignore_label=255,
            **kwargs
    ):
        self.base_dir = os.path.dirname(sda_path)
        self.sda_data_config = get_config_from_yaml(sda_path)
        self.data_split = data_split

        self.augmentation = augmentation
        self.train_size = train_size
        self.class_type = self.sda_data_config.dataset.class_type
        self.x_bandnum = self.sda_data_config.dataset.x_bandnum
        self.mean = ([item * 255 for item in mean] * 60)[:self.x_bandnum]
        self.std = ([item * 255 for item in std] * 60)[:self.x_bandnum]
        self.ignore_label = ignore_label

        self.aug_offline = kwargs.get('aug_offline')
        self.load_data()
        self.transform = self.compose_transforms()

    @abstractmethod
    def load_data(self):
        pass

    @abstractmethod
    def compose_transforms(self):
        pass

    def __getitem__(self, item):
        raise NotImplementedError

    def __len__(self):
        raise NotImplementedError
