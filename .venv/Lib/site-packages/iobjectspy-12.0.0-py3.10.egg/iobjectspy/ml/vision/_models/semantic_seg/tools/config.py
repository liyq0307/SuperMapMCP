from dotmap import DotMap
import yaml
import os
from iobjectspy._logger import log_info


class ConfigLoader:
    """
    用于读取配置文件，并管理里面的属性，有新增属性和更新属性的功能
    """
    def __init__(self, yaml_file):
        if not os.path.isfile(yaml_file):
            raise FileNotFoundError(f"The file {yaml_file} does not exist.")
        else:
            log_info(f"The file {yaml_file} loaded successful.")
        self._yaml_file = yaml_file
        self._config = None
        self.reload()

    def reload(self):
        with open(self._yaml_file, 'r', encoding='utf-8') as file:
            config_dict = yaml.safe_load(file)
        self._config = DotMap(config_dict)

    def update_config(self, **kwargs):
        updated_keys = []
        not_found_keys = []
        for key, value in kwargs.items():
            keys = key.split('.')
            current = self._config
            for k in keys[:-1]:
                if k not in current:
                    not_found_keys.append(key)
                    break
                current = current[k]
            else:
                if keys[-1] in current:
                    current[keys[-1]] = value
                    updated_keys.append(key)
                else:
                    not_found_keys.append(key)

        if updated_keys:
            print(f"Updated keys: {', '.join(updated_keys)}")
        if not_found_keys:
            print(f"Warning: The following keys were not found and were not updated: {', '.join(not_found_keys)}")

    def add(self, **kwargs):
        for key, value in kwargs.items():
            self._config[key] = value
        print(f"Added/Updated keys: {', '.join(kwargs.keys())}")

    def save(self, yaml_file=None):
        if yaml_file is None:
            yaml_file = self._yaml_file
        with open(yaml_file, 'w') as file:
            yaml.dump(self._config.toDict(), file)

    def __getattr__(self, name):
        if name.startswith('_'):
            return super().__getattribute__(name)
        try:
            return self._config[name]
        except KeyError:
            raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, name, value):
        if name.startswith('_'):
            super().__setattr__(name, value)
        else:
            self._config[name] = value

    def __getstate__(self):
        state = self.__dict__.copy()
        del state['_config']
        return state

    def __setstate__(self, state):
        self.__dict__.update(state)
        self.reload()

    @property
    def config(self):
        return self._config.toDict()