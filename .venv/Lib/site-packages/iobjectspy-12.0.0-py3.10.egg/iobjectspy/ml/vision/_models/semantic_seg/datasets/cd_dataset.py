import os
import warnings

import cv2
import numpy as np
import rasterio
from PIL import Image

from .seg_dataset import SegDataset

cv2.ocl.setUseOpenCL(False)
cv2.setNumThreads(0)


def list_x12y_file_fromtxt(txt_path):
    """
    通过txt文件列出image，mask所有文件完整路径
    :param txt_path: 文件名字txt路径
    :return:
    """
    x1_filenames = []
    x2_filenames = []
    y_filenames = []
    with open(txt_path, 'r', encoding='utf-8') as f:
        for line in f:
            files = line.strip().split(',')
            x1_filenames.append(files[0])
            x2_filenames.append(files[1])
            y_filenames.append(files[2])
    return x1_filenames, x2_filenames, y_filenames


class CDDataset(SegDataset):
    """CamVid Dataset. Read images, apply augmentation and preprocessing transformations.

    Args:
        images_dir (str): path to images folder
        masks_dir (str): path to segmentation masks folder
        class_values (list): values of classes to extract from segmentation mask
        augmentation (albumentations.Compose): data transfromation pipeline
            (e.g. flip, scale, etc.)
        preprocessing (albumentations.Compose): data preprocessing
            (e.g. noralization, shape manipulation, etc.)

    """

    def __init__(
            self,
            sda_path,
            data_split='train',
            augmentation=False,
            train_size=None,
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225],
            ignore_label=0,
            **kwargs
    ):
        super().__init__(sda_path, data_split, augmentation,
                         train_size, mean, std, ignore_label, **kwargs)

    def load_data(self):
        valid_splits = {'train', 'val', 'trainval'}

        if self.data_split not in valid_splits:
            raise ValueError(f"Invalid data_split. Expected one of: {valid_splits}")

        csv_path = os.path.join(self.base_dir, 'csv_path', f'{self.data_split}.csv')
        self.image_paths1, self.image_paths2, self.mask_paths = list_x12y_file_fromtxt(csv_path)

    def __getitem__(self, idx):
        image_path1 = self.image_paths1[idx]
        image_path2 = self.image_paths2[idx]
        mask_path = self.mask_paths[idx]
        # read data
        if image_path1.endswith('tif') and image_path2.endswith('tif'):
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                image1 = rasterio.open(image_path1).read()[:self.x_bandnum, ...]
                image2 = rasterio.open(image_path2).read()[:self.x_bandnum, ...]
            image1 = np.transpose(image1, (1, 2, 0))
            image2 = np.transpose(image2, (1, 2, 0))
            if self.x_bandnum == 3:
                image1 = cv2.cvtColor(image1, cv2.COLOR_RGB2BGR)
                image2 = cv2.cvtColor(image2, cv2.COLOR_RGB2BGR)
        else:
            image1 = cv2.imdecode(np.fromfile(image_path1, dtype=np.uint8), -1)[:, :, 0:3]
            image2 = cv2.imdecode(np.fromfile(image_path2, dtype=np.uint8), -1)[:, :, 0:3]

        mask = np.array(Image.open(mask_path)) \
            if mask_path.strip().endswith('png') else cv2.imread(mask_path, 0)

        image = [image1, image2]
        image, mask = self.transform(image, mask)

        return image[0], image[1], mask

    def __len__(self):
        return len(self.image_paths1)
