from .api import SegTorchTrainer
from .api import SegTorchEstimation
from .api import SegTorchEstimation_CD

from ._torch_models import build_torch_seg_model


class SegFormerTrainer(SegTorchTrainer):

    def get_loss_type(self):
        if len(self.sda_data_config.dataset.class_type) > 2:
            self.loss_type = 'crossentropyloss'
        else:
            self.loss_type = 'dice_loss+bce_loss'


class SiamSegFormerTrainer(SegTorchTrainer):
    def __init__(self):
        super().__init__()
        self.callbacks = []
        self.loss = []
        self.acc = []
        self.val_loss = []
        self.val_acc = []
        self.model_architecture = 'siamsegformer'

    def get_model(self):
        self.model_architecture = 'siamsegformer'
        model = build_torch_seg_model(
            in_channels=self.sda_data_config.dataset.x_bandnum,
            classes=len(self.sda_data_config.dataset.class_type) if
            len(self.sda_data_config.dataset.class_type) > 2 else 1,
            backbone_name=self.sdt_trainer_config.model.backbone_name,
            encoder_weights=self.encoder_weights,
            net_type='siamsegformer',
            activation=self.activation,
            head_merge_method=self.sdt_trainer_config.model.head_merge_method
        )

        self.get_loss_type()

        return model

    def get_loss_type(self):
        if len(self.sda_data_config.dataset.class_type) > 2:
            self.loss_type = 'crossentropyloss'
        else:
            self.loss_type = 'dice_loss+bce_loss'


class SegFormerEstimation(SegTorchEstimation):
    def __init__(self, model_path, config, gpus, batch_size, test_aug=False, **kwargs):
        super(SegFormerEstimation, self).__init__(model_path, config, gpus, batch_size, test_aug, **kwargs)
        pass


class SiamSegFormerEstimation(SegTorchEstimation_CD):
    def __init__(self, model_path, config, gpus, batch_size, test_aug=False, **kwargs):
        super(SiamSegFormerEstimation, self).__init__(model_path, config, gpus, batch_size, test_aug, **kwargs)
        pass
