from abc import ABC, abstractmethod

import rasterio
from osgeo import gdal
from torch.utils.data import Dataset

from ....segment_anything.utils import ResizeLongestSide, BatchResizeLongestSide
from ....utils import read_raster_data, count_tile


class SamDataset(Dataset, ABC):
    def __init__(self, sam, datapath, promptdata, tilesize, offset):
        super(SamDataset, self).__init__()
        dataset = gdal.Open(datapath)
        self.projection = dataset.GetProjection()
        with rasterio.open(datapath) as src:
            img_width, img_height, rectangle_ymin, rectangle_xmin, transform = read_raster_data(src, infer_region=None)
            self.ori_image_size = (src.width, src.height)
            self.rectangle_size = (rectangle_xmin, rectangle_ymin)
            self.affine_transform = src.transform
            self.profile = src.profile
            if abs(src.res[0]) > 0.001:
                self.coordinate = 'projected'
            else:
                self.coordinate = 'geographic'
        self.datapath = datapath
        self.promptdata = promptdata
        self.tilesize = tilesize
        self.offset = offset
        self.tile_list = count_tile(self.ori_image_size, self.tilesize, self.offset)
        self.transform = ResizeLongestSide(sam.image_encoder.img_size)
        self.batchtransform = BatchResizeLongestSide(sam.image_encoder.img_size)
        self.samples = []

    @abstractmethod
    def __len__(self):
        pass

    @abstractmethod
    def __getitem__(self, idx):
        pass
