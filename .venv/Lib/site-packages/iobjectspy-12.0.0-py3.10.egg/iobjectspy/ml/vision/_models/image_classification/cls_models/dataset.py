# !/usr/bin/env python3
# coding=utf-8

import torch
from torch.utils import data
import rasterio
import numpy as np
import warnings
from .....toolkit._toolkit import preprocess_input

def list_scene_image_file_fromtxt(txt_path):
    """
    通过txt文件列出image所有文件完整路径和对应id
    :param txt_path: 文件名字txt路径
    :return:
    """
    x_filenames = []
    label_names = []
    id_names = []
    with open(txt_path, 'r', encoding='utf-8') as f:
        for line in f:
            files = line.strip().split(',')
            x_filenames.append(files[0])
            label_names.append(files[1])
            id_names.append(files[2])
    return x_filenames, label_names, id_names

class get_scene_image_from_csv(data.Dataset):
    def __init__(self, csv_path, label_dict, input_bands=3, is_aug=False, image_size=None):
        """
        从csv文件中的路径读取训练数据
        :param csv_path: csv未见路径
        :return: 读取的数据 （X,Y）
        """

        from albumentations import Compose, VerticalFlip, RandomRotate90, OneOf, ElasticTransform, GridDistortion, \
            CLAHE, OpticalDistortion, RandomBrightnessContrast, RandomGamma, RandomCrop, Resize, \
            RandomResizedCrop, GridDropout, ImageCompression, HueSaturationValue, IAAAdditiveGaussianNoise, GaussNoise,\
            GaussianBlur, MedianBlur
        self.x_file, self.label_name, self.label_value = list_scene_image_file_fromtxt(csv_path)
        self.input_bands = input_bands
        self.label_dict = label_dict
        if is_aug:
            aug_list = [
                # ToFloat(),
                VerticalFlip(p=0.5),
                RandomRotate90(p=0.5),
                OneOf([
                    # 畸变相关操作
                    ElasticTransform(p=0.5, alpha=120, sigma=120 * 0.05, alpha_affine=120 * 0.03),
                    GridDistortion(p=0.5),
                    # OpticalDistortion(p=1, distort_limit=2, shift_limit=0.5)
                ], p=0.4),
                OneOf([
                    # 高斯噪点
                    IAAAdditiveGaussianNoise(p=0.5),
                    GaussNoise(p=0.5),
                ], p=0.4),
                OneOf([
                    # 模糊相关操作
                    # MotionBlur(p=.2),
                    MedianBlur(blur_limit=3, p=0.1),
                    # Blur(blur_limit=3, p=0.1),
                    GaussianBlur(blur_limit=(3, 7), p=0.5),
                ], p=0.4),
                # OneOf(
                #     [
                #         RandomBrightnessContrast(p=0.5),
                #         HueSaturationValue(p=0.5),
                #     ],
                #     p=0.5,
                # ),
                # ImageCompression(quality_lower=50, quality_upper=80, p=0.9),
                # # CLAHE(p=0.5),
                # RandomResizedCrop(height=image_size, width=image_size, scale=(0.5, 1.0), ratio=(1., 1.), p=0.9),
                GridDropout(ratio=0.4, p=0.3),
                RandomGamma(p=0.2)
            ]
            if image_size is not None:
                aug_list.append(Resize(image_size, image_size, p=1))
            self.aug = Compose(aug_list)

        elif image_size is not None:
            self.aug = Compose([
                    Resize(image_size, image_size, p=1)]
                )
        else:
            pass

    def __getitem__(self, index):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            image = rasterio.open(self.x_file[index]).read()[:self.input_bands, ...]
        image = np.transpose(image, (1, 2, 0))
        augmented = self.aug(image=image)
        image = augmented['image']
        label = int(self.label_value[index])
        image = preprocess_input(image)
        image = torch.from_numpy(image.transpose(2, 0, 1).astype('float32'))
        return image, label

    def __len__(self):
        return len(self.x_file)