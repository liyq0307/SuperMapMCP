import torch
import torch.nn as nn
import torch.nn.functional as F


class MLP(nn.Module):
    """
    Linear Embedding
    """
    def __init__(self, input_dim=2048, embed_dim=768):
        super().__init__()
        self.proj = nn.Linear(input_dim, embed_dim)

    def forward(self, x):
        x = x.flatten(2).transpose(1, 2)
        x = self.proj(x)
        return x

class SegFormerDecoder(nn.Module):
    def __init__(
            self,
            encoder_channels,
            encoder_depth=5,
            embedding_dim=256,
            segmentation_channels=256,
            dropout=0.1,
            siame_encoder=True
    ):
        super().__init__()

        self.out_channels = segmentation_channels
        self.siame_encoder = siame_encoder
        self.head = SegFormerHead(encoder_channels, encoder_depth, embedding_dim, segmentation_channels, dropout)

    def forward(self, *features):
        if self.siame_encoder:
            features1, features2 = features[0], features[1]
            x = self.head(features1), self.head(features2)
        else:
            x = self.head(features)
        return x

class SegFormerHead(nn.Module):
    def __init__(
            self,
            encoder_channels,
            encoder_depth=5,
            embedding_dim=256,
            segmentation_channels=256,
            dropout=0.1,
    ):
        super(SegFormerHead, self).__init__()
        self.out_channels = segmentation_channels
        if encoder_depth < 3:
            raise ValueError("Encoder depth for SegFormer decoder cannot be less than 4, got {}.".format(encoder_depth))

        encoder_channels = encoder_channels[::-1]
        encoder_channels = encoder_channels[:encoder_depth + 1]

        self.linear_c4 = MLP(input_dim=encoder_channels[0], embed_dim=embedding_dim)
        self.linear_c3 = MLP(input_dim=encoder_channels[1], embed_dim=embedding_dim)
        self.linear_c2 = MLP(input_dim=encoder_channels[2], embed_dim=embedding_dim)
        self.linear_c1 = MLP(input_dim=encoder_channels[3], embed_dim=embedding_dim)

        self.linear_fuse = nn.Sequential(
            nn.Conv2d(embedding_dim * 4, embedding_dim, kernel_size=1, stride=1, padding=0, bias=False),
            nn.BatchNorm2d(embedding_dim),
            nn.ReLU()
        )
        self.dropout = nn.Dropout2d(p=dropout)

    def forward(self, features):
        c1, c2, c3, c4 = features[-4:]

        ############## MLP decoder on C1-C4 ###########
        n, _, h, w = c4.shape

        _c4 = self.linear_c4(c4).permute(0, 2, 1).reshape(n, -1, c4.shape[2], c4.shape[3])
        _c4 = F.interpolate(_c4, size=c1.size()[2:], mode='bilinear', align_corners=False)

        _c3 = self.linear_c3(c3).permute(0, 2, 1).reshape(n, -1, c3.shape[2], c3.shape[3])
        _c3 = F.interpolate(_c3, size=c1.size()[2:], mode='bilinear', align_corners=False)

        _c2 = self.linear_c2(c2).permute(0, 2, 1).reshape(n, -1, c2.shape[2], c2.shape[3])
        _c2 = F.interpolate(_c2, size=c1.size()[2:], mode='bilinear', align_corners=False)

        _c1 = self.linear_c1(c1).permute(0, 2, 1).reshape(n, -1, c1.shape[2], c1.shape[3])

        x = self.linear_fuse(torch.cat([_c4, _c3, _c2, _c1], dim=1))

        x = self.dropout(x)

        return x