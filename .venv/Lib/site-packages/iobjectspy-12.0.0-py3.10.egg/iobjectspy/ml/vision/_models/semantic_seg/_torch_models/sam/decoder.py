from ....prompt_segmentation.segment_anything.modeling import MaskDecoder
from ....prompt_segmentation.segment_anything.modeling import TwoWayTransformer


class SamDecoder(MaskDecoder):
    _models = {}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    @classmethod
    def create(cls, model_type: str, num_classess: int = 1):
        if model_type == "vit-b":
            prompt_embed_dim = 256
        elif model_type == "vit-l":
            prompt_embed_dim = 256
        elif model_type == "vit-h":
            prompt_embed_dim = 256
        else:
            raise ValueError(f"Unknown model type: {model_type}")

        if num_classess is None:
            num_multimask_outputs = 3
        else:
            num_multimask_outputs = num_classess
        return cls(
            num_multimask_outputs=num_multimask_outputs,
            transformer=TwoWayTransformer(
                depth=2,
                embedding_dim=prompt_embed_dim,
                mlp_dim=2048,
                num_heads=8,
            ),
            transformer_dim=prompt_embed_dim,
            iou_head_depth=3,
            iou_head_hidden_dim=256,
        )

    @classmethod
    def __class_getitem__(cls, key):
        if isinstance(key, tuple) and len(key) == 2:
            model_type, num_classes = key
        else:
            model_type, num_classes = key, 1

        model_key = f"{model_type}_{num_classes}"
        if model_key not in cls._models:
            cls._models[model_key] = cls.create(model_type, num_classes)
        return cls._models[model_key]
