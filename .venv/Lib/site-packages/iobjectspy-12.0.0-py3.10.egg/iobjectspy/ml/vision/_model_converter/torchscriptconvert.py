import os
import os.path as osp
import torch
from typing import Dict
from ._base import BaseConverter


class TorchScriptConverter(BaseConverter):
    def __init__(self, model_path, output_model_path, **kwargs):
        """
        转换pytorch模型至torchscript模型

        :param model_path: 模型存储路径
        :type  model_path: str
        :param output_model_path: 模型输出路径
        :type output_model_path: str
        """
        self.config = model_path
        dir_path, sdm_name = osp.split(model_path)
        model_name = osp.splitext(sdm_name)[0]
        self.torch_model_path = osp.join(dir_path, model_name + '.pth')
        output_model_path = osp.join(output_model_path, model_name)
        if not osp.exists(output_model_path):
            os.makedirs(output_model_path)
        self.output_model_path = osp.join(output_model_path, model_name + '.pt')
        self.config_path = osp.join(output_model_path, model_name + '.sdm')

    def torch2torchscript(self, convert_cfg: Dict = dict()):
        """
        输出torchscript模型

        两种可选导出计算图方式跟踪(trace)和脚本化(script)
        跟踪法只能通过实际运行一遍模型的方法导出模型的静态图，即无法识别出模型中的控制流(如循环)
        脚本化则能通过解析模型来正确记录所有的控制流

        :param export_cfg: 模型转换参数
        :type export_cfg: dict
        :return:
        torch.jit.TracedModule: The traced torch jit model.
        """
        try:
            model = torch.load(self.torch_model_path, map_location=convert_cfg['device'])
            with torch.no_grad():
                try:
                    input_tensor = torch.rand(convert_cfg['input_shape']).to(convert_cfg['device'])
                    inter_rep = torch.jit.trace(model.eval(), input_tensor)  #
                except:
                    inter_rep = torch.jit.script(model)  # 可避免控制流语句错误识别，但转换容易失败
                torch.jit.save(inter_rep, self.output_model_path)
                self._save_model(self.config, self.config_path)
                print("Model convert successfully.")
                return inter_rep
        except:
            raise RuntimeError("Model convert failed.")


        # todo, 模型重构，替换模型中不能被转换且可以重写的部分，尝试trace和script联合解决不能转换部分


