from iobjectspy._jsuperpy._utils import check_lic
import os
import os.path as osp
from  ..toolkit._toolkit import get_config_from_yaml

class ModelConverter:
    def __init__(self, model_path, output_model_path, **kwargs):
        """
        模型转换功能入口
        支持输出torchscript, onnx等中间模型
        支持Libtorch，ONNX Runtime，TensorRT，Ncnn，Openppl，OpenVINO等多个推理引擎

        :param model_path: 模型存储路径
        :type  model_path: str
        :param output_model_path: 模型输出路径
        :type output_model_path: str
        """
        check_lic()
        if not osp.isfile(model_path):
            raise FileNotFoundError('Model file does not exist.')
        if os.path.exists(output_model_path) is not True:
            os.makedirs(output_model_path, exist_ok=True)
        self.config = get_config_from_yaml(model_path)
        self.model_path = model_path
        self.output_model_path = output_model_path
        self.kwargs = kwargs
        self.__func_class = ''.join([x.capitalize() for x in self.config.model_type.split('_')])

    def pytorch2torchscript(self):
        """
        torchscript模型转换
        :return:
        """
        from ._model_converter import TorchScriptConverter
        from ._model_converter.configs import torchscript

        if self.__func_class == 'GeneralChangeDetection':
            convert_cfg = torchscript.cd_convert_cfg
        elif self.__func_class == 'BinaryClassification':
            convert_cfg = torchscript.seg_convert_cfg
        elif self.__func_class == 'MultiClassification':
            convert_cfg = torchscript.seg_convert_cfg
        elif self.__func_class == 'SceneClassification':
            convert_cfg = torchscript.cls_convert_cfg
        elif self.__func_class == 'ImageClassification':
            convert_cfg = torchscript.cls_convert_cfg
        elif self.__func_class == 'ObjectExtraction':
            pass
        elif self.__func_class == 'ObjectDetection':
            pass
        else:
            raise RuntimeError('Unsupported model type.')

        TorchScriptModelConvert = TorchScriptConverter(self.model_path, self.output_model_path, **self.kwargs)
        TorchScriptModelConvert.torch2torchscript(convert_cfg)

        return self.output_model_path

    def pytorch2onnx(self):
        """
        onnx模型转换
        :return:
        """
        from ._model_converter import ONNXConverter
        from ._model_converter.configs import onnx

        if self.__func_class == 'GeneralChangeDetection':
            convert_cfg = onnx.cd_convert_cfg
        elif self.__func_class == 'BinaryClassification':
            convert_cfg = onnx.seg_convert_cfg
        elif self.__func_class == 'MultiClassification':
            convert_cfg = onnx.seg_convert_cfg
        elif self.__func_class == 'SceneClassification':
            convert_cfg = onnx.cls_convert_cfg
        elif self.__func_class == 'ImageClassification':
            convert_cfg = onnx.cls_convert_cfg
        elif self.__func_class == 'ObjectExtraction':
            pass
        elif self.__func_class == 'ObjectDetection':
            pass
        else:
            raise RuntimeError('Unsupported model type.')

        OnnxModelConvert = ONNXConverter(self.model_path, self.output_model_path, **self.kwargs)
        OnnxModelConvert.torch2onnx(convert_cfg)

        return self.output_model_path
