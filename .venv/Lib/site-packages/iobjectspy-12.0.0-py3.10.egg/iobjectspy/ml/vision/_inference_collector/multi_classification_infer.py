# !/usr/bin/env python3
# coding=utf-8
import os

from iobjectspy import DatasetImage, DatasetMosaic
from ...toolkit._toolkit import get_config_from_yaml


class MultiClassification:
    def __init__(self, model_path, gpus, batch_size, **kwargs):
        self.model_path = os.path.abspath(os.path.join(model_path, os.path.pardir))
        self.config = get_config_from_yaml(model_path)
        self.estimation = None
        self.gpus = gpus
        self.batch_size = batch_size
        self.model_kwargs = kwargs
        self.load_model()

        # if self.config.ModelInput.Width != self.config.ModelInput.Height:
        #     raise ValueError("Model input width and height should be equal!")

    def load_model(self):
        """
        根据func_str拼接字符串自动执行各个网络的模型加载函数
        :return:
        """
        func_str = 'self._' + self.config.model_architecture + '_' + self.config.framework + '_load_model'
        return eval(func_str)()

    def infer(self, input_data, out_data, out_dataset_name, offset, result_type, infer_region, **kwargs):
        """
        根据self.estimation执行对应的影像预测函数estimate_img
        :return:
        """

        if out_dataset_name is None:
            out_dataset_name = self.config.model_type + '_' + self.config.model_categorys

        result = self.estimation.estimate_img(
            input_data, offset, out_data, out_dataset_name, result_type, infer_region, **kwargs
        )
        if isinstance(input_data, DatasetImage) or isinstance(input_data, DatasetMosaic):
            src_data = input_data.name
        else:
            src_data = os.path.basename(input_data).split('.')[0]

        if isinstance(result, str):
            print(
                'The results of image \'{}\' have been saved to \'{}\'!'.format(
                    src_data, os.path.basename(result).split('.')[0]
                )
            )
        else:
            print('Inference have done!')
        return result

    def _deeplabv3plus_pytorch_load_model(self):
        from .._models.semantic_seg.deeplabv3plus_torch import Deeplabv3PlusEstimation
        self.estimation = Deeplabv3PlusEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def _fpn_pytorch_load_model(self):
        from .._models.semantic_seg.fpn_torch import FpnEstimation
        self.estimation = FpnEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def _upernet_pytorch_load_model(self):
        from .._models.semantic_seg.upernet_torch import UPerNetEstimation
        self.estimation = UPerNetEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def _sfnet_pytorch_load_model(self):
        from .._models.semantic_seg.sfnet_torch import SfnetEstimation
        self.estimation = SfnetEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def _unet_pytorch_load_model(self):
        from .._models.semantic_seg.unet_torch import UnetEstimation
        self.estimation = UnetEstimation(
            self.model_path, self.config, self.gpus, self.batch_size
        )

    def _segformer_pytorch_load_model(self):
        from .._models.semantic_seg.segformer_torch import SegFormerEstimation
        self.estimation = SegFormerEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def _mask2former_pytorch_load_model(self):
        from .._models.semantic_seg.mask2former_torch import Mask2FormerEstimation
        self.estimation = Mask2FormerEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def _sam_lora_pytorch_load_model(self):
        from .._models.semantic_seg.sam_torch import SamEstimation
        self.estimation = SamEstimation(
            self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs
        )

    def close_model(self):
        self.estimation.close_model()
