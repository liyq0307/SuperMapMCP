# !/usr/bin/env python3
# coding=utf-8
import os
from pathlib import Path

from ...toolkit._toolkit import get_config_from_yaml


class PromptSegmentationInfer(object):
    def __init__(self, model_path, gpus, batch_size, **kwargs):
        self.sam_estimation = None
        self.model_path = model_path
        self.config = get_config_from_yaml(model_path)
        self.sam_model_type = self.config.encoder.replace("-", "_")
        self.gpus = gpus
        self.bs = batch_size
        self.func_str = 'self.' + self.config.get('model_architecture') + '_' + self.config.get('framework')
        self.load_model()

    def load_model(self):
        # 创建Path对象
        path = Path(self.model_path).parent
        sam_pth_list = os.listdir(path)
        sam_model_pth = next((f for f in sam_pth_list if os.path.splitext(f)[1] in ('.pt', '.pth')), None)
        sam_model_path = os.path.join(path, sam_model_pth)

        from .._models.prompt_segmentation._torch_models.inference_sam import SamVectorEstimation
        self.sam_estimation = SamVectorEstimation(self.config, self.sam_model_type, sam_model_path, self.gpus, self.bs)

    def infer(self, input_data, prompt_data, out_data, out_dataset_name, prompt_type,
              tilesize, offset, sample_method, **kwargs):
        """
        该方法将上层接口方法进行统一
        :param input_data:  临时生成的遥感影像tif文件路径(str)
        :param prompt_data: 输入作为提示的矢量面数据(DatasetVector)
        :param out_data:    输出的ubdx数据源路径(str)
        :param out_dataset_name:    输出保存矢量的数据集名称(str)
        :param prompt_type: 用于指定SAM提示推理模式(str)
        :param point_density:   用于撒点的密度0~1(float)
        :param tilesize: 用户指定的block大小
        :param offset: 用户指定的tile偏移量
        :return: 推理方法func
        """
        if out_dataset_name is None:
            out_dataset_name = 'temp'

        return eval(self.func_str)(input_data, prompt_data, out_data, out_dataset_name, prompt_type,
                                   tilesize, offset, sample_method, **kwargs)

    def sam_pytorch(self, input_data, prompt_data, out_data, out_dataset_name, prompt_type,
                    tilesize, offset, sample_method, **kwargs):
        """
        这个方法实现用户直接输入矢量数据来进行提示推理，矢量数据支持udbx
        :param input_data:  临时生成的遥感影像tif文件路径(str)
        :param prompt_data: 输入作为提示的矢量面数据(DatasetVector)
        :param out_data:    输出的ubdx数据源路径(str)
        :param out_dataset_name:    输出保存矢量的数据集名称(str)
        :param prompt_type: 用于指定SAM提示推理模式(str)
        :param point_density:   用于撒点的密度0~1(float)
        :param tilesize: 用户指定的block大小
        :param offset: 用户指定的tile偏移量
        :return: 结果数据集的名称(str)
        """

        if not isinstance(out_dataset_name, str):
            raise TypeError('out_dataset_name must be str ')

        result = self.sam_estimation.predict(input_data, prompt_data, out_data, out_dataset_name,
                                             prompt_type, tilesize, offset, sample_method, **kwargs)

        input_data_name = kwargs.get('input_data_name', None)
        if isinstance(result, str):
            print('The result of image \'{}\' have been saved to \'{}\'!'.format(input_data_name,
                                                                                 os.path.basename(result)))
        else:
            print("The Object Extraction have done!")
        return result
