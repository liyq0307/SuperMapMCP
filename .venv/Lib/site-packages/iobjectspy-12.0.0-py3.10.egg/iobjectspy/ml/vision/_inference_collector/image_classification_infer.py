# !/usr/bin/env python3
# coding=utf-8
import os

from .._models.image_classification import ClassificationEstimation
from ...toolkit._toolkit import get_config_from_yaml


class ImageClassification:
    def __init__(self, model_path, gpus, batch_size):
        self.model_path = os.path.abspath(os.path.join(model_path, os.path.pardir))
        self.config = get_config_from_yaml(model_path)
        self.gpus = gpus
        self.batch_size = batch_size

    def infer(self, input_data, out_data, out_dataset_name, **kwargs):
        """
        根据func_str拼接字符串自动执行各个网络的函数
        :return:
        """

        func_str = 'self.' + self.config.model_architecture + '_' + self.config.framework
        result = eval(func_str)(input_data, out_data, out_dataset_name, **kwargs)
        print("The image classification have done!")
        return result

    def cnn_pytorch(self, input_data, out_data, out_dataset_name, **kwargs):
        return ClassificationEstimation(self.model_path, self.config, self.gpus, self.batch_size).estimate_picture(input_data, out_data,
                                                                                   out_dataset_name, **kwargs)

    def close_model(self):
        pass
