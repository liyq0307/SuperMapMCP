# !/usr/bin/env python3
# coding=utf-8
import os

from iobjectspy import DatasetImage, DatasetMosaic
from ...toolkit._toolkit import get_config_from_yaml
from .._models.image_classification import ClassificationEstimation


class SceneClassification:
    def __init__(self, model_path, gpus, batch_size):
        self.model_path = os.path.abspath(os.path.join(model_path, os.path.pardir))
        self.config = get_config_from_yaml(model_path)
        self.gpus = gpus
        self.batch_size = batch_size

        # if self.config.ModelInput.Width != self.config.ModelInput.Height:
        #     raise ValueError("Model input width and height should be equal!")

    def infer(self,input_data,  out_data, out_dataset_name, result_type, infer_region, **kwargs):
        """
        根据func_str拼接字符串自动执行各个网络的函数
        :return:
        """

        if out_dataset_name is None:
            out_dataset_name = self.config.ModelType + '_' + self.config.ModelCategorys

        func_str = 'self.' + self.config.model_architecture + '_' + self.config.framework + '_' + result_type
        result = eval(func_str)(input_data,  out_data, out_dataset_name, result_type, infer_region, **kwargs)
        if isinstance(input_data, DatasetImage) or isinstance(input_data, DatasetMosaic):
            src_data = input_data.name
        else:
            src_data = os.path.basename(input_data).split('.')[0]
        if isinstance(result, str):
            print('\nThe results of image \'{}\' have been saved to \'{}\'!'.format(src_data, os.path.basename(result).split('.')[0]))
        else:
            print("\nThe scene classification have done!")
        return result

    def cnn_pytorch_region(self, input_data, out_data, out_dataset_name, result_type, infer_region, **kwargs):
        return ClassificationEstimation(self.model_path, self.config, self.gpus, self.batch_size).estimate_img(input_data, out_data,
                                                                                   out_dataset_name,
                                                                                   result_type, infer_region, **kwargs)

    def cnn_pytorch_grid(self, input_data, out_data, out_dataset_name, result_type, infer_region, **kwargs):
        return ClassificationEstimation(self.model_path, self.config, self.gpus, self.batch_size).estimate_img(input_data, out_data,
                                                                                   out_dataset_name,
                                                                                   result_type, infer_region, **kwargs)
