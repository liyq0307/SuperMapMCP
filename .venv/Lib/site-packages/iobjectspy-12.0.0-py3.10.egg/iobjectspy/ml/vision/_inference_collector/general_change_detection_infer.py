import os

from iobjectspy import DatasetImage, DatasetMosaic
from .._models.semantic_seg.sfnet_torch import SiamSfnetEstimation
from .._models.semantic_seg.segformer_torch import SiamSegFormerEstimation
from .._models.semantic_seg.dsamnet_torch import DsamnetEstimation
from ...toolkit._toolkit import get_config_from_yaml


class GeneralChangeDetection:
    def __init__(self, model_path, gpus, batch_size, **kwargs):
        self.model_path = os.path.abspath(os.path.join(model_path, os.path.pardir))
        self.config = get_config_from_yaml(model_path)
        self.estimation = None
        self.gpus = gpus
        self.batch_size = batch_size
        self.model_kwargs = kwargs
        self.load_model()

        # if self.config.ModelInput.Width != self.config.ModelInput.Height:
        #     raise ValueError("Model input width and height should be equal!")

    def load_model(self):
        """
        根据func_str拼接字符串自动执行各个网络的模型加载函数
        :return:
        """
        func_str = 'self._' + self.config.model_architecture + '_' + self.config.framework + '_load_model'
        return eval(func_str)()

    def infer(self, input_data, input_compare_data, out_data, out_dataset_name, offset, result_type, infer_region, **kwargs):
        """
        根据self.estimation执行对应的影像预测函数estimate_img
        :return:
        """

        if out_dataset_name is None:
            out_dataset_name = self.config.model_type + '_' + self.config.model_categorys

        input_data_list = [input_data, input_compare_data]
        result = self.estimation.estimate_img(input_data_list, offset, out_data,
                                              out_dataset_name, result_type, infer_region,
                                              **kwargs)
        if isinstance(input_data, DatasetImage) or isinstance(input_data, DatasetMosaic):
            src_data = input_data.name
        else:
            src_data = os.path.basename(input_data).split('.')[0]
        if isinstance(result, str):
            print('The results of image pair \'{}\' have been saved to \'{}\'!'.format(src_data, os.path.basename(result).split('.')[0]))
        else:
            print("The general change detection have done!")
        return result

    def _siamsfnet_pytorch_load_model(self):
        self.estimation = SiamSfnetEstimation(self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs)

    def _siamsegformer_pytorch_load_model(self):
        self.estimation = SiamSegFormerEstimation(self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs)

    def _dsamnet_pytorch_load_model(self):
        self.estimation = DsamnetEstimation(self.model_path, self.config, self.gpus, self.batch_size, **self.model_kwargs)

    def close_model(self):
        self.estimation.close_model()
