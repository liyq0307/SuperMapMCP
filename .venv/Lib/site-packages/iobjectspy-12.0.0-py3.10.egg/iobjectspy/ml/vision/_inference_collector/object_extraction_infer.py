# !/usr/bin/env python3
# coding=utf-8
import os
import re
from iobjectspy import DatasetImage, DatasetMosaic
from ...toolkit._toolkit import get_config_from_yaml


class ObjectExtraction:
    def __init__(self, model_path, gpus, batch_size, **kwargs):
        self.config = model_path
        self.batch_size = batch_size
        self.model_path = os.path.abspath(os.path.join(model_path, os.path.pardir))
        self.model_kwargs = kwargs
        self.gpus = gpus
        self.model_kwargs['gpus'] = gpus
        self.load_model()
        # todo
        # if self.config.ModelInput.Width != self.config.ModelInput.Height:
        #     raise ValueError("Model input width and height should be equal!")

    def load_model(self):

        if not isinstance(self.config, str):
            raise TypeError('model_path must be str ')
        elif not os.path.exists(self.config):
            raise Exception('model_path does not exist ')

        func_config = get_config_from_yaml(self.config)
        if func_config.development_kit:
            from .._models.instance_segmentation._torch_models.inference_mmdet import MmdetEstimation
            self.mmdet_estimation = MmdetEstimation(self.model_path, self.config, self.batch_size, **self.model_kwargs)
        else:
            raise NotImplementedError('Not support! Please use the SuperMap iObjects Python 11i(2023) V11.1.1 and earlier version!')

    def infer(self, input_data, out_data, out_dataset_name, return_bbox, infer_region, **kwargs):
        """
        根据func_str拼接字符串自动执行各个网络的函数
        :return:
        """
        if out_dataset_name is None:
            out_dataset_name = self.config.model_type + '_' + self.config.model_categorys

        func_config = get_config_from_yaml(self.config)
        if func_config.development_kit:
            func_str = 'self.' + func_config.development_kit + '_' + func_config.framework
        else:
            func_str = 'self.' + func_config.model_architecture + '_' + func_config.framework

        return eval(func_str)(input_data, out_data, out_dataset_name, return_bbox, infer_region, **kwargs)

    def infer_pic(self, image_path_list, out_visual_result, out_txt_result):
        """
        根据func_str拼接字符串自动执行各个网络的函数
        :return:
        """

        func_config = get_config_from_yaml(self.config)
        if func_config.development_kit:
            func_str = 'self.' + func_config.development_kit + '_' + func_config.framework + '_pic'
        else:
            raise NotImplementedError("Not implemented, please use another algorithm!")
        return eval(func_str)(image_path_list, out_visual_result, out_txt_result)

    def mmdet_pytorch(self, input_data, out_data, out_dataset_name, return_bbox, infer_region):

        if not isinstance(self.model_path, str):
            raise TypeError('model_path must be str ')
        elif not os.path.exists(self.model_path):
            raise Exception('model_path does not exist ')

        if not isinstance(out_dataset_name, str):
            raise TypeError('out_dataset_name must be str ')

        # if isinstance(input_data, str):
        #     result = self.mmdet_estimation.mmdet_estimate_img(input_data, out_data, out_dataset_name, return_bbox)
        # else:
        #     raise TypeError('input_data must be str or Dataset')
        result = self.mmdet_estimation.mmdet_estimate_img(input_data, out_data, out_dataset_name,
                                                          return_bbox, infer_region)
        if isinstance(input_data, DatasetImage) or isinstance(input_data, DatasetMosaic):
            src_data = input_data.name
        else:
            src_data = input_data
        if isinstance(result, str):
            print('The result \'{}\' of file \'{}\' have done!'.format(src_data, os.path.basename(result)))
        else:
            print("The Object Extraction have done!")
        return result

    def mmdet_pytorch_pic(self, input_data, out_visual_result, out_txt_result):

        if not isinstance(self.model_path, str):
            raise TypeError('model_path must be str ')
        elif not os.path.exists(self.model_path):
            raise Exception('model_path does not exist ')

        result = self.mmdet_estimation._mmdet_estimate_pic(input_data, out_visual_result, out_txt_result)
        if isinstance(input_data, DatasetImage) or isinstance(input_data, DatasetMosaic):
            src_data = input_data.name
        else:
            src_data = input_data
        if isinstance(result, str):
            print('The result \'{}\' of file \'{}\' have done!'.format(src_data, os.path.basename(result)))
        else:
            print("The Object Extraction have done!")
        return result

    def close_model(self):
        self.mmdet_estimation.close_model()
