from iobjectspy._jsuperpy._utils import check_lic
from ..toolkit._toolkit import get_config_from_yaml
import os
import os.path as osp

class ImageryTrainer:
    def __init__(self, train_data_path, config, epoch, batch_size, lr, output_model_path, output_model_name,
                 backbone_name, backbone_weight_path=None, log_path='./', reload_model=False,
                 pretrained_model_path=None, gpus=[0], init_data=True, **kwargs):
        """
        影像数据模型训练功能入口，

        :param train_data_path: 训练数据路径
        :type train_data_path: str
        :param config: 配置文件路径
        :type config: str
        :param epoch: 迭代次数
        :type epoch: int
        :param batch_size: 批数据大小
        :type batch_size: int
        :param lr: 学习率
        :type lr: float or None
        :param output_model_path: 输出模型文件路径
        :type output_model_path: str
        :param output_model_name: 输出模型的文件名
        :type output_model_name: str
        :param backbone_name: 主干网络名
        :type backbone_name: str
        :param backbone_weight_path: 主干网络模型文件路径，若为None则随机初始化模型权重
        :type backbone_weight_path: str or None
        :param log_path: 日志及checkpoint输出路径
        :type log_path: str
        :param reload_model: 是否重载之前训练的checkpoint模型
        :type  reload_model: bool
        :param pretrained_model_path: 预训练模型路径（可选）
        :type pretrained_model_path: str or None
        """
        check_lic()
        self.train_data_path = train_data_path
        self.config = config
        self.epoch = epoch
        self.batch_size = batch_size
        self.lr = lr
        self.output_model_path = output_model_path
        self.output_model_name = output_model_name
        self.backbone_name = backbone_name
        self.backbone_weight_path = backbone_weight_path
        self.log_path = log_path
        self.reload_model = reload_model
        self.pretrained_model_path = pretrained_model_path
        self.gpus = gpus
        self.init_data = init_data
        self.kwargs = kwargs
        if self.reload_model:
            sdl_path = osp.join(self.log_path, 'latest.sdl')
            try:
                self.sdl = get_config_from_yaml(sdl_path)
            except:
                raise FileNotFoundError('There are no sdl file in {}'.format(self.log_path))
            self.train_data_path = self.sdl.train_data_path
            self.config = self.sdl.train_config
            self.output_model_path = self.sdl.model_path
            self.output_model_name = self.sdl.model_name
            self.backbone_name = self.sdl.encoder
            self.batch_size = self.sdl.batch_size
            self.lr = self.sdl.learning_rate
            self.epoch = self.sdl.num_epochs
            self.init_data = False
        else:
            if osp.exists(self.log_path):
                if os.listdir(self.log_path):
                    raise FileExistsError(f"Log path {self.log_path} should be empty")

    def object_detect_train(self):
        """
        目标检测模型训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.object_detection_train import ObjectDetection
        ObjectDetection(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                        self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                        self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                        self.init_data, **self.kwargs).train()

    def binary_classify_train(self):
        """
        二元分类模型训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.binary_classification_train import BinaryClassification
        BinaryClassification(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                             self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                             self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                             self.init_data, **self.kwargs).train()

    def multi_classify_train(self):
        """
        地物分类训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.binary_classification_train import BinaryClassification
        BinaryClassification(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                             self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                             self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                             self.init_data, **self.kwargs).train()

    def scene_classify_train(self):
        """
        场景分类训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.scene_classification_train import SceneClassification
        SceneClassification(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                            self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                            self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                            self.init_data, **self.kwargs).train()

    def object_extract_train(self):
        """
        对象提取训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.object_extraction_train import ObjectExtraction
        ObjectExtraction(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                         self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                         self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                         self.init_data,
                         **self.kwargs).train()

    def general_change_detection_train(self):
        """
        通用变化检测模型训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.change_detection_train import ChangeDetection
        ChangeDetection(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                        self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                        self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                        self.init_data, **self.kwargs).train()


class PictureTrainer:
    def __init__(self, train_data_path, config, epoch, batch_size, lr, output_model_path, output_model_name,
                 backbone_name, backbone_weight_path=None, log_path='./', reload_model=False,
                 pretrained_model_path=None, gpus=[0], init_data=True, **kwargs):
        """
        图片数据模型训练功能入口，

        :param train_data_path: 训练数据路径
        :type train_data_path: str
        :param config: 配置文件路径
        :type config: str
        :param epoch: 迭代次数
        :type epoch: int
        :param batch_size: 批数据大小
        :type batch_size: int
        :param lr: 学习率
        :type lr: float
        :param output_model_path: 输出模型文件路径
        :type output_model_path: str
        :param output_model_name: 输出模型的文件名
        :type output_model_name: str
        :param backbone_name: 主干网络名
        :type backbone_name: str
        :param backbone_weight_path: 主干网络模型文件路径，若为None则随机初始化模型权重
        :type backbone_weight_path: str or None
        :param log_path: 日志及checkpoint输出路径
        :type log_path: str
        :param reload_model: 是否重载之前训练的checkpoint模型
        :type  reload_model: bool
        :param pretrained_model_path: 预训练模型路径（可选）
        :type pretrained_model_path: str or None
        """

        check_lic()
        self.train_data_path = train_data_path
        self.config = config
        self.epoch = epoch
        self.batch_size = batch_size
        self.lr = lr
        self.output_model_path = output_model_path
        self.output_model_name = output_model_name
        self.backbone_name = backbone_name
        self.backbone_weight_path = backbone_weight_path
        self.log_path = log_path
        self.reload_model = reload_model
        self.pretrained_model_path = pretrained_model_path
        self.gpus = gpus
        self.init_data = init_data
        self.kwargs = kwargs
        if self.reload_model:
            sdl_path = osp.join(self.log_path, 'latest.sdl')
            try:
                self.sdl = get_config_from_yaml(sdl_path)
            except:
                raise FileNotFoundError('There are no sdl file in {}'.format(self.log_path))
            self.train_data_path = self.sdl.train_data_path
            self.config = self.sdl.train_config
            self.output_model_name = self.sdl.model_name
            self.backbone_name = self.sdl.encoder
            self.batch_size = self.sdl.batch_size
            self.lr = self.sdl.learning_rate
            self.epoch = self.sdl.num_epochs
            self.init_data = False
        else:
            if osp.exists(self.log_path):
                if os.listdir(self.log_path):
                    raise FileExistsError("Log path should be empty")

    def object_detect_train(self):
        """
        目标检测模型训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.object_detection_train import ObjectDetection
        ObjectDetection(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                        self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                        self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                        self.init_data, **self.kwargs).train()

    def picture_object_extraction_train(self):
        """
        图片分割训练功能：基于Mask-rcnn

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.object_extraction_train import ObjectExtraction
        ObjectExtraction(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                         self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                         self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                         self.init_data,
                         **self.kwargs).train()

    def picture_classify_train(self):
        """
        图片分类训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.image_classification_train import ImageClassification
        ImageClassification(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                            self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                            self.backbone_weight_path, self.reload_model, self.pretrained_model_path,
                            self.gpus, self.init_data, **self.kwargs).train()


    def object_extraction_train(self):
        """
        目标检测模型训练功能

        生成模型将存储在输入的 ‘output_model_path’ 路径下

        :return: None
        """
        from ._trainer_collector.object_extraction_train import ObjectExtraction
        ObjectExtraction(self.train_data_path, self.config, self.epoch, self.batch_size, self.lr,
                         self.output_model_path, self.output_model_name, self.log_path, self.backbone_name,
                         self.backbone_weight_path, self.reload_model, self.pretrained_model_path, self.gpus,
                         self.init_data,
                         **self.kwargs).train()
