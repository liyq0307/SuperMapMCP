# !/usr/bin/env python3
# coding=utf-8
import os
import warnings

import rasterio
import yaml
from dotmap import DotMap
from rasterio.windows import Window

from iobjectspy import Dataset


def _save_img(ds, tile_format, block_xmin, block_ymin, tile_size_x, tile_size_y, output_path_images, transf,
              input_data=None):
    """
    保存tile
    :param ds: rasterio读取影像文件
    :param tile_format: 保存的影像文件格式
    :param block_xmin: tile左上方像素坐标(x方向)
    :param block_ymin: tile左上方像素坐标(y方向)
    :param tile_size_x: tile的宽
    :param tile_size_y: tile的高
    :param output_path_images: 输出tile的路径
    :param transf: 每个tile的transf
    :param input_data: 原始影像文件路径
    """
    img = ds.read(
        window=Window(block_xmin, block_ymin, tile_size_x, tile_size_y))

    if tile_format == "jpg":
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            dst = rasterio.open(output_path_images + '.' + tile_format, 'w',
                                driver='JPEG', width=tile_size_x, height=tile_size_y,
                                count=3, dtype=ds.dtypes[0])
            dst.write(img[:3, :, :])

    elif tile_format == "png":
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            dst = rasterio.open(output_path_images + '.' + tile_format, 'w',
                                driver='PNG',
                                width=tile_size_x, height=tile_size_y,
                                count=3, dtype=ds.dtypes[0])
            dst.write(img[:3, :, :])

    elif tile_format == 'tif':
        dst = rasterio.open(output_path_images + '.' + tile_format, 'w',
                            driver="GTiff", width=tile_size_x, height=tile_size_y,
                            count=ds.count, crs=ds.crs, transform=transf,
                            dtype=ds.dtypes[0])
        dst.write(img)

    elif tile_format == 'origin':
        dst = rasterio.open(output_path_images + os.path.splitext(input_data)[-1], 'w',
                            driver=ds.driver, width=tile_size_x, height=tile_size_y,
                            count=ds.count, crs=ds.crs, transform=transf,
                            dtype=ds.dtypes[0])
        dst.write(img)
    dst.close()

def _save_img_cd(ds, ds_compare, tile_format, block_xmin, block_ymin, block_xmin_compare, block_ymin_compare,
                 tile_size_x, tile_size_y, output_path_images1, output_path_images2, transf, transf_compare,
               input_data1=None, input_data2=None):
    """
    保存tile
    :param ds1: rasterio读取影像文件
    :param ds2: rasterio读取影像文件
    :param tile_format: 保存的影像文件格式
    :param block_xmin: tile前时相左上方像素坐标(x方向)
    :param block_ymin: tile前时相左上方像素坐标(y方向)
    :param block_xmin_compare: tile后时相左上方像素坐标(x方向)
    :param block_ymin_compare: tile后时相左上方像素坐标(y方向)
    :param tile_size_x: tile的宽
    :param tile_size_y: tile的高
    :param output_path_images: 输出tile的路径
    :param transf: 每个tile前时相的transf
    :param transf_compare: 每个tile后时相的transf
    :param input_data1: 前时相原始影像文件路径
    :param input_data2: 后时相原始影像文件路径
    """
    img1 = ds.read(
        window=Window(block_xmin, block_ymin, tile_size_x, tile_size_y))
    img2 = ds_compare.read(
        window=Window(block_xmin_compare, block_ymin_compare, tile_size_x, tile_size_y))
    if tile_format == "jpg":
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            dst1 = rasterio.open(output_path_images1 + '.' + tile_format, 'w',
                                driver='JPEG', width=tile_size_x, height=tile_size_y,
                                count=3, dtype=ds.dtypes[0])
            dst2 = rasterio.open(output_path_images2 + '.' + tile_format, 'w',
                                 driver='JPEG', width=tile_size_x, height=tile_size_y,
                                 count=3, dtype=ds_compare.dtypes[0])
            dst2.write(img2[:3, :, :])
            dst1.write(img1[:3, :, :])

    elif tile_format == "png":
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            dst1 = rasterio.open(output_path_images1 + '.' + tile_format, 'w',
                                driver='PNG',
                                width=tile_size_x, height=tile_size_y,
                                count=3, dtype=ds.dtypes[0])
            dst2 = rasterio.open(output_path_images2 + '.' + tile_format, 'w',
                                 driver='PNG',
                                 width=tile_size_x, height=tile_size_y,
                                 count=3, dtype=ds_compare.dtypes[0])
            dst1.write(img1[:3, :, :])
            dst2.write(img2[:3, :, :])

    elif tile_format == 'tif':
        dst1 = rasterio.open(output_path_images1 + '.' + tile_format, 'w',
                            driver="GTiff", width=tile_size_x, height=tile_size_y,
                            count=ds.count, crs=ds.crs, transform=transf,
                            dtype=ds.dtypes[0])
        dst2 = rasterio.open(output_path_images2 + '.' + tile_format, 'w',
                             driver="GTiff", width=tile_size_x, height=tile_size_y,
                             count=ds_compare.count, crs=ds_compare.crs, transform=transf_compare,
                             dtype=ds_compare.dtypes[0])
        dst1.write(img1)
        dst2.write(img2)

    elif tile_format == 'origin':
        dst1 = rasterio.open(output_path_images1 + os.path.splitext(input_data1)[-1], 'w',
                            driver=ds.driver, width=tile_size_x, height=tile_size_y,
                            count=ds.count, crs=ds.crs, transform=transf,
                            dtype=ds.dtypes[0])
        dst2 = rasterio.open(output_path_images2 + os.path.splitext(input_data2)[-1], 'w',
                            driver=ds_compare.driver, width=tile_size_x, height=tile_size_y,
                            count=ds_compare.count, crs=ds_compare.crs, transform=transf_compare,
                            dtype=ds_compare.dtypes[0])
        dst1.write(img1)
        dst2.write(img2)
    dst1.close()
    dst2.close()

def _get_bandnum(ds, tile_format):
    """
    统计_save_img()方法生成的影像文件波段数
    :param ds: rasterio读取影像文件
    :param tile_format: 保存的影像文件格式
    """
    if tile_format == "jpg":
        bandnum = 3
    elif tile_format == "png":
        bandnum = 3
    else:
        bandnum = ds.count
    return bandnum



def get_key(dict, value):
    """
    字典通过value查找key
    :param dict: 字典
    :param value: 值
    :return: key : 键
    """
    return [k for k, v in dict.items() if v == value]


def _get_input_feature(input_label):
    """
    :param input_label: 矢量数据集
    :return: features
    """
    if isinstance(input_label, Dataset):
        input_label = input_label.get_features()
    elif isinstance(input_label, str):
        with open(input_label, 'r') as f:
            pass
    return input_label


def get_tile_start_index(tile_start_index, tile_count_yml):
    """
    获取训练数据生成的文件索引
   :param tile_start_index: 文件索引数
   :param tile_count_yml: 训练数据配置文件(.sda)
   :return: tile_start_index
   :return: image_count
   """
    image_count = 0
    try:
        with open(tile_count_yml,encoding='utf8') as f:
            config_dict = yaml.load(f, Loader=yaml.FullLoader)
        voc_config = DotMap(config_dict)
        image_count = voc_config.dataset.get('image_count')
        if tile_start_index == -1:
            tile_start_index = image_count
        else:
            tile_start_index = tile_start_index
    except:
        if tile_start_index == -1:
            tile_start_index = 0
        else:
            tile_start_index = tile_start_index

    return tile_start_index, image_count


def _rgb(v):
    """
    获取RGB颜色
   :param v: 十六进制颜色码
   :return: RGB颜色值
       """
    r, g, b = v[1:3], v[3:5], v[5:7]
    return int(r, 16), int(g, 16), int(b, 16)

def get_image_transf(input_data):
    with rasterio.open(input_data) as ds:
        transf = ds.transform
    return transf

def get_image_crs(input_data):
    with rasterio.open(input_data) as ds:
        crs = ds.crs
    return crs

