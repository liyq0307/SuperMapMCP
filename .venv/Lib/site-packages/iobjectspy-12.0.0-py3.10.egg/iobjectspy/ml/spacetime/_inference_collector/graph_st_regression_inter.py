import os

from .._models.torch_st_regression import GraphSTRegressionEstimation
from .._models.dcrnn.lib.utils import read_yaml, write_yaml
from pathlib import Path


class GraphSTRegression:
    def __init__(self, input_data_dir, model_path,
                 out_data,
                 location_data_path=None,
                 out_dataset_name='graph_st_predictions',
                 add_index_before=False,
                 fields_as_point=['longitude','latitude'],
                 **kwargs):
        self.model_path = os.path.abspath(
                os.path.splitext(model_path)[0]+'.pth'
            )
        self.config = read_yaml(Path(model_path))
        self.input_data_dir = input_data_dir
        self.out_data = out_data
        self.kwargs = kwargs
        self.location_data_path = location_data_path
        self.add_index_before = add_index_before
        self.out_dataset_name=out_dataset_name

    def infer(self):
        """
        根据func_str拼接字符串自动执行各个网络的函数
        :return:
        """

        # func_str = 'self.' + self.config.model_architecture + '_' + self.config.framework
        result = eval('self.dcrnn_pytorch')()
        print("The graph st-regression have done!")
        return result

    def dcrnn_pytorch(self):
        estimator = GraphSTRegressionEstimation(self.model_path,
                                                self.input_data_dir,
                                                self.out_data,
                                                self.location_data_path,
                         fields_as_point=['longitude','latitude'])

        if self.location_data_path is not None:
            return estimator.estimate_dataset(self.location_data_path,
                                              self.out_data,
                                              out_dataset_name=self.out_dataset_name,
                                              add_index_before = self.add_index_before,
                         fields_as_point=['longitude','latitude'])
        else:
            return estimator.estimate_datatable()
